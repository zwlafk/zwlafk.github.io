<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>next主题添加algolia搜索</title>
    <url>/2017/09/20/algolia-for-next/</url>
    <content><![CDATA[<p>hexo中可以使用第三方的algolia作为搜索功能，在<a href="http://theme-next.iissnan.com/third-party-services.html#algolia-search" target="_blank" rel="noopener">next</a>主题下也有很好的支持，但是按照官网的说明跑了一边并不成功，发现有几点坑需要注意<br><a id="more"></a></p>
<h2 id="更改algolia版本"><a href="#更改algolia版本" class="headerlink" title="更改algolia版本"></a>更改algolia版本</h2><p>为了更好的使用，我们把algolia版本改为0.2.0，在package.json中找到依赖中的”hexo-algolia”字段改为<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;hexo-algolia&quot;: &quot;^0.2.0&quot;</span><br></pre></td></tr></table></figure></p>
<h2 id="站点配置"><a href="#站点配置" class="headerlink" title="站点配置"></a>站点配置</h2><p>在站点配置中除了官网上说明的还需要在增加一个fields字段：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">algolia:</span><br><span class="line">  appId: &apos;appid&apos;</span><br><span class="line">  apiKey: &apos;apiKey&apos;</span><br><span class="line">  adminApiKey: &apos;adminApiKey&apos;</span><br><span class="line">  indexName: &apos;上面填写的index名&apos;</span><br><span class="line">  chunkSize: 5000</span><br><span class="line">  /*在后面添加一个字段*/</span><br><span class="line">  fields:</span><br><span class="line">    - title</span><br><span class="line">    - slug</span><br><span class="line">    - path</span><br><span class="line">    - content:strip</span><br></pre></td></tr></table></figure></p>
<p>在\themes\next下找到”_config.yml”，找到”algolia_search”，将enable修改为true，labels修改为自己需要的<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Algolia Search</span><br><span class="line">algolia_search:</span><br><span class="line">  enable: true</span><br><span class="line">  hits:</span><br><span class="line">    per_page: 10</span><br><span class="line">  labels:</span><br><span class="line">    input_placeholder: 搜索关键字</span><br><span class="line">    hits_empty: &quot;没有找到 $&#123;query&#125;&quot;</span><br><span class="line">    hits_stats: &quot;$找到了 &#123;hits&#125; 条结果，耗时 $&#123;time&#125; ms&quot;</span><br></pre></td></tr></table></figure></p>
<h2 id="更改header-swig"><a href="#更改header-swig" class="headerlink" title="更改header.swig"></a>更改header.swig</h2><p>在themes\next\layout_partials中找到header.swig，找到以下代码并修改<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;nav <span class="class"><span class="keyword">class</span></span>=<span class="string">"site-nav"</span>&gt;</span><br><span class="line">  &lt;!-- 添加  theme.algolia_search.enable --&gt;</span><br><span class="line">  &#123;% <span class="keyword">set</span> hasSearch = theme.swiftype_key || theme.algolia_search.enable || theme.tinysou_Key || config.search %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#123;% <span class="keyword">if</span> theme.menu %&#125;</span><br><span class="line">    &lt;ul id=<span class="string">"menu"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"menu"</span>&gt;</span><br><span class="line">      &#123;% <span class="keyword">for</span> name, path <span class="keyword">in</span> theme.menu %&#125;</span><br><span class="line">        &#123;% <span class="keyword">set</span> itemName = name.toLowerCase() %&#125;</span><br><span class="line">        &lt;li class="menu-item menu-item-&#123;&#123; itemName &#125;&#125;<span class="string">"&gt;</span></span><br><span class="line"><span class="string">          &lt;a href="</span>&#123;&#123; url_for(path) &#125;&#125;<span class="string">" rel="</span>section<span class="string">"&gt;</span></span><br><span class="line"><span class="string">            &#123;% if theme.menu_icons.enable %&#125;</span></span><br><span class="line"><span class="string">              &lt;i class="</span>menu-item-icon fa fa-fw fa-&#123;&#123;theme.menu_icons[itemName] | <span class="keyword">default</span>(<span class="string">'question-circle'</span>) | lower &#125;&#125;<span class="string">"&gt;&lt;/i&gt; </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            &#123;% endif %&#125;</span></span><br><span class="line"><span class="string">            &#123;&#123; __('menu.' + itemName) &#125;&#125;</span></span><br><span class="line"><span class="string">          &lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">      &#123;% endfor %&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &#123;% if hasSearch %&#125;</span></span><br><span class="line"><span class="string">    &lt;li class="</span>menu-item menu-item-search<span class="string">"&gt;</span></span><br><span class="line"><span class="string">      &#123;% if theme.swiftype_key %&#125;</span></span><br><span class="line"><span class="string">        &lt;a href="</span>javascript:;<span class="string">" class="</span>st-search-show-outputs<span class="string">"&gt;</span></span><br><span class="line"><span class="string">      &#123;% elseif config.search %&#125;</span></span><br><span class="line"><span class="string">        &lt;a href="</span>javascript:;<span class="string">" class="</span>popup-trigger<span class="string">"&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;!-- 添加 开始 --&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      &#123;% elseif theme.algolia %&#125;</span></span><br><span class="line"><span class="string">        &lt;a href="</span>javascript:;<span class="string">" class="</span>popup-trigger<span class="string">"&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;!-- 添加 结束 --&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      &#123;% endif %&#125;</span></span><br><span class="line"><span class="string">        &#123;% if theme.menu_icons.enable %&#125;</span></span><br><span class="line"><span class="string">          &lt;i class="</span>menu-item-icon fa fa-search fa-fw<span class="string">"&gt;&lt;/i&gt; &lt;br /&gt;</span></span><br><span class="line"><span class="string">        &#123;% endif %&#125;</span></span><br><span class="line"><span class="string">        &#123;&#123; __('menu.search') &#125;&#125;</span></span><br><span class="line"><span class="string">      &lt;/a&gt;</span></span><br><span class="line"><span class="string">    &lt;/li&gt;</span></span><br><span class="line"><span class="string">  &#123;% endif %&#125;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &#123;% endif %&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &#123;% if hasSearch %&#125;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>site-search<span class="string">"&gt;</span></span><br><span class="line"><span class="string">      &#123;% include 'search.swig' %&#125;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  &#123;% endif %&#125;</span></span><br><span class="line"><span class="string">&lt;/nav&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>执行<code>hexo algolia</code>前先执行<code>hexo clean</code></p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>algolia</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello Hexo</title>
    <url>/2017/09/19/hello-world/</url>
    <content><![CDATA[<p>用<a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> + <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>搭建的博客.<br><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">文档</a>.<br><a id="more"></a></p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"文章名"</span></span><br></pre></td></tr></table></figure>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<h3 id="云端部署"><a href="#云端部署" class="headerlink" title="云端部署"></a>云端部署</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>在其他电脑上使用hexo更新博客的解决方案</title>
    <url>/2017/09/20/hexo-branch/</url>
    <content><![CDATA[<h2 id="设想"><a href="#设想" class="headerlink" title="设想"></a>设想</h2><p>最开始设想建立两个repo，一个repo1是hexo生成的项目，另一个repo2是写在这个项目deploy的配置中，这样只用管理repo1这个项目，每次用<code>hexo d</code>相当于更新repo2，达到不同机子上更新博客的目的，换了机子把repo1同步下来管理即可。<br>看到网上有人说用一个repo两个分支，嗯，道理是一样的，这样也更加合理，决定采用这种方法。<br><a id="more"></a></p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ul>
<li>在xxx.githbu.io这个个repo中建立两个分支<ul>
<li>一个分支为master</li>
<li>另一个为hexo（名字无所谓）</li>
</ul>
</li>
<li>把hexo设置为默认分支</li>
<li>在hexo中使用<code>hexo init</code>建立一个hexo项目，配置文件中的deploy填写为master分支</li>
<li>博客的构建修改直接在hexo分支中进行，更新完运行<code>git push</code>，运行<code>hexo g -d</code>生成静态文件并部署到master分支上</li>
<li>在另一台电脑上运行<code>git pull</code>获得整个博客文件，更新完重复上一步</li>
</ul>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>树节点的查找</title>
    <url>/2018/09/02/js-tree-search-collect-attr/</url>
    <content><![CDATA[<p>最近项目用到一些对树操作，记录一下<br><a id="more"></a><br>需要通过唯一标识id获取树的节点，并拿到该节点下子节点的id<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> tree = [&#123;</span><br><span class="line">    id:<span class="string">'1'</span>,</span><br><span class="line">    children:[&#123;</span><br><span class="line">        id:<span class="string">'1-1'</span>,</span><br><span class="line">        children:[&#123;</span><br><span class="line">            id:<span class="string">'1-1'</span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            id:<span class="string">'1-2'</span>,</span><br><span class="line">            children:[&#123;</span><br><span class="line">                id:<span class="string">'1-2-1'</span></span><br><span class="line">            &#125;,&#123;</span><br><span class="line">                id:<span class="string">'1-2-2'</span></span><br><span class="line">            &#125;,&#123;</span><br><span class="line">                id:<span class="string">'1-2-3'</span></span><br><span class="line">            &#125;,&#123;</span><br><span class="line">                id:<span class="string">'1-2-4'</span></span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            id:<span class="string">'1-3'</span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            id:<span class="string">'1-4'</span></span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        id:<span class="string">'1-2'</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        id:<span class="string">'1-3'</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        id:<span class="string">'1-4'</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTreeNode</span>(<span class="params">tree, id</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> stack = [];</span><br><span class="line"></span><br><span class="line">    stack = stack.concat(tree);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(stack.length) &#123;</span><br><span class="line">        <span class="keyword">var</span> temp = stack.shift();<span class="comment">//出栈</span></span><br><span class="line">        <span class="keyword">if</span>(temp.children) &#123;</span><br><span class="line">            stack = temp.children.concat(stack);<span class="comment">//深度优先遍历，子节点放入栈顶</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(id === temp.id) &#123;<span class="comment">//检查出栈节点是否是要找的目标节点</span></span><br><span class="line">            <span class="keyword">return</span> [temp];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> res = []</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepSearch</span>(<span class="params">tree,id</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;tree.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(tree[i].children &amp;&amp; tree[i].children.length&gt;<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//有children就递归，没什么好说的了</span></span><br><span class="line">            deepSearch(tree[i].children,id);</span><br><span class="line">        &#125;</span><br><span class="line">        res.push(tree[i].id)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> target = getTreeNode(tree,<span class="string">'1-2'</span>)</span><br><span class="line"><span class="keyword">var</span> result = deepSearch(target)</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>tree</tag>
      </tags>
  </entry>
  <entry>
    <title>面对各种小程序,制作一个less2whatever工具</title>
    <url>/2019/03/07/less2whatever/</url>
    <content><![CDATA[<p>实现一个命令行工具less2whatever，监听less文件变化，自动编译生成对应后缀的文件<br>这篇文章我首发于<a href="https://juejin.im/post/5c7b208ee51d457f7b6c98f5" target="_blank" rel="noopener">掘金</a><br><a id="more"></a></p>
<h2 id="重复的轮子"><a href="#重复的轮子" class="headerlink" title="重复的轮子"></a>重复的轮子</h2><p>监听less文件变化原地生成css文件，这个功能在诸多编辑器上的插件都能实现，通过配置，也可以改变生成文件的后缀名，比如wxss,acss等。<br>但是当我接到公司小程序项目的时候，第一反应还是想自己动手实现一个。原因是：</p>
<ol>
<li>这个工具实现起来并不复杂；</li>
<li>这是个练习的好机会，可以学习如何用node编写命令行工具，如何在npm上发布自己的包。   </li>
</ol>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>这个工具做的事情应该是这样的，在项目目录通过命令行运行后，开始监听文件夹包括子文件夹内.less文件的变化，当监听到文件变化时，运行lessc命令在文件所在的目录生成对应后缀的样式文件。<br>首先是初始化一个node工程<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir less2whatever</span><br><span class="line">cd less2whatever</span><br><span class="line">npm init</span><br></pre></td></tr></table></figure></p>
<p>然后创建一个名为<code>bin</code>的文件夹，在bin文件夹里新建一个<code>less2whatever.js</code>，我们最终输入命令行之后执行的就是这个文件，代码如下<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>),</span><br><span class="line">    path = process.cwd(),</span><br><span class="line">    fileWatcher = <span class="built_in">require</span>(<span class="string">"../index.js"</span>);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  </span>suffix 自定义生成的后缀名，从命令行的参数中获取，默认为css</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> run = <span class="function"><span class="keyword">function</span> (<span class="params">suffix=<span class="string">"css"</span></span>) </span>&#123;</span><br><span class="line">    fs.readdir(path, <span class="function"><span class="keyword">function</span> (<span class="params">err, files</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(path)</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">console</span>.log(err);</span><br><span class="line">        &#125;</span><br><span class="line">        fileWatcher(path, suffix)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//获取除第一个命令以后的第一个参数</span></span><br><span class="line">run(process.argv.slice(<span class="number">2</span>)[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure></p>
<p>在package.json中添加bin字段<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">"bin": &#123; "less2whatever": "bin/less2whatever.js" &#125;</span><br></pre></td></tr></table></figure></p>
<p>表示<code>less2whatever</code>命令执行的是<code>bin/less2whatever.js</code><br>代码顶部一定要加上<code>#!/usr/bin/env node</code>,表示要使用node来执行这段脚本,<code>fileWatcher</code>是我们监听文件并编译文件的代码：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> exec = <span class="built_in">require</span>(<span class="string">'child_process'</span>).exec</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  </span>rootPath 执行命令时的路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  </span>filename 变动的less文件名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compileFile</span>(<span class="params">rootPath, filename, suffix</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">let</span> filePathArr = <span class="string">`<span class="subst">$&#123;rootPath + <span class="string">'\\'</span> + filename&#125;</span>`</span>.split(<span class="string">'.'</span>)</span><br><span class="line">	filePathArr.pop()</span><br><span class="line">	<span class="keyword">let</span> filenameWithPath = filePathArr.join(<span class="string">'.'</span>)</span><br><span class="line">	exec(<span class="string">`lessc -x <span class="subst">$&#123;filenameWithPath&#125;</span>.less &gt; <span class="subst">$&#123;filenameWithPath&#125;</span>.<span class="subst">$&#123;suffix&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归监听文件夹下less文件的变化（包括新建less文件）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>rootPath 执行命令时的路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>suffix 需要编译生成的文件后缀名（wxss/css）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fileWatcher</span>(<span class="params">rootPath, suffix</span>) </span>&#123;</span><br><span class="line">	fs.watch(rootPath,</span><br><span class="line">		&#123;</span><br><span class="line">			encoding: <span class="string">'utf-8'</span>,</span><br><span class="line">			recursive: <span class="literal">true</span>,<span class="comment">//是否监听子文件夹下的文件</span></span><br><span class="line">			persistent: <span class="literal">true</span><span class="comment">//是否持续监听</span></span><br><span class="line">		&#125;,</span><br><span class="line">		(eventType, filename) =&gt; &#123;</span><br><span class="line">			<span class="keyword">if</span> (eventType === <span class="string">"change"</span> &amp;&amp; path.extname(filename) === <span class="string">".less"</span>) &#123;</span><br><span class="line">				compileFile(rootPath, filename, suffix)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = fileWatcher</span><br></pre></td></tr></table></figure></p>
<p>当我们监听到less文件变化时，执行<code>compileFile</code>,通过<code>lessc</code>生成对应文件（所以我们这个工具使用前提是已经全局安装了less）<br>到这里我们就已经实现了工具的全部功能，接下来是通过<code>npm publish</code>发布<br>在这之前我们先执行<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install . -g</span><br></pre></td></tr></table></figure></p>
<p>这行命令是将这个包全局安装在自己的电脑上，我们可以先验证一下工具有没有问题<br><img src="https://user-gold-cdn.xitu.io/2019/3/3/1694158cb7627f59?w=1920&amp;h=1080&amp;f=gif&amp;s=14037066" alt><br><img src="https://user-gold-cdn.xitu.io/2019/3/3/1694159222f831b4?w=1920&amp;h=1080&amp;f=gif&amp;s=8441323" alt><br>工具可以正常使用，接下来就是发布了<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure></p>
<p>需要注意的是如果你之前没有发布过npm包，需要执行<code>npm adduser</code>添加你的账号，然后就可以发布成功了，当你更新了包的内容，记得把package.json中的version同步更改，在执行<code>npm publish</code>就可以更新你的npm包了。   </p>
<hr>
<p>项目地址：<a href="https://github.com/zwlafk/less2whatever" target="_blank" rel="noopener">https://github.com/zwlafk/less2whatever</a><br>npm地址：<a href="https://www.npmjs.com/package/less2whatever" target="_blank" rel="noopener">https://www.npmjs.com/package/less2whatever</a>   </p>
<hr>
<p>参考链接<br><a href="https://nodejs.org/api/fs.html#fs_fs_watch_filename_options_listener" target="_blank" rel="noopener">https://nodejs.org/api/fs.html#fs_fs_watch_filename_options_listener</a><br><a href="https://segmentfault.com/a/1190000002918295" target="_blank" rel="noopener">https://segmentfault.com/a/1190000002918295</a>   </p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>less</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>企业微信开发记录</title>
    <url>/2019/03/06/my-wechat-dev-tips-in-2018/</url>
    <content><![CDATA[<p>记录与总结去年开发企业微信项目相关。（部分代码应该应该同样可以用于公众号的开发）<br><a id="more"></a></p>
<h2 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h2><p>调用微信的api第一步应该就是获得微信签名，我自己用node搭建了前端自用的签名服务<br>node后端代码如下：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//server.js</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> morgan = <span class="built_in">require</span>(<span class="string">'morgan'</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'./router'</span>)</span><br><span class="line"></span><br><span class="line">app.use(morgan(<span class="string">'dev'</span>))</span><br><span class="line"><span class="comment">// 只用接口服务，这里不需要托管静态文件了</span></span><br><span class="line"><span class="comment">// app.use(express.static(__dirname + '/dist'))</span></span><br><span class="line">app.use(router)</span><br><span class="line">app.listen(<span class="number">8086</span>);</span><br></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//router.js</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> getAccessToken = <span class="built_in">require</span>(<span class="string">'./middleware/wx'</span>).getAccessToken</span><br><span class="line"><span class="keyword">const</span> getJsapiToken = <span class="built_in">require</span>(<span class="string">'./middleware/wx'</span>).getJsapiToken</span><br><span class="line"><span class="keyword">const</span> getSignature = <span class="built_in">require</span>(<span class="string">'./middleware/wx'</span>).getSignature</span><br><span class="line"><span class="keyword">const</span> router = express.Router()</span><br><span class="line">router.get(<span class="string">'/api/get/signature'</span>,</span><br><span class="line">  getAccessToken,</span><br><span class="line">  getJsapiToken,</span><br><span class="line">  getSignature</span><br><span class="line">)</span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br></pre></td></tr></table></figure>
<p>生成微信签名需要先生成token，再生成ticket，然后用sha1生成我们要的signature，每一步生成的值要做好缓存，我用了<code>&#39;memory-cache&#39;</code>包处理<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// middleware/wx.js</span></span><br><span class="line"><span class="keyword">const</span> sha1 = <span class="built_in">require</span>(<span class="string">'js-sha1'</span>);</span><br><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>);</span><br><span class="line"><span class="keyword">const</span> cache = <span class="built_in">require</span>(<span class="string">'memory-cache'</span>);</span><br><span class="line"><span class="keyword">let</span> access_token = <span class="string">""</span></span><br><span class="line"><span class="keyword">let</span> jsapi_ticket = <span class="string">""</span></span><br><span class="line"><span class="keyword">const</span> expire_time = <span class="number">7199999</span></span><br><span class="line"><span class="keyword">const</span> getAccessToken = <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">query</span>: &#123; corpsecret, corpid, url &#125; &#125; = req</span><br><span class="line">  <span class="keyword">let</span> access_token_cache = cache.get(corpsecret)</span><br><span class="line">  <span class="keyword">if</span> (access_token_cache) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(access_token_cache, <span class="string">'access_token_cache'</span>)</span><br><span class="line">    access_token = access_token_cache</span><br><span class="line">    next()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    request(<span class="string">'https://qyapi.weixin.qq.com/cgi-bin/gettoken'</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        qs: &#123;</span><br><span class="line">          corpid,</span><br><span class="line">          corpsecret</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      (error, response, body) =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"***********getAccessToken middle**********"</span>)</span><br><span class="line">        <span class="keyword">let</span> info = <span class="built_in">JSON</span>.parse(body)</span><br><span class="line">        access_token = info.access_token</span><br><span class="line">        cache.put(corpsecret, access_token, expire_time);</span><br><span class="line">        next()</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> getJsapiToken = <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> jsapi_ticket_cache = cache.get(access_token)</span><br><span class="line">  <span class="keyword">if</span> (jsapi_ticket_cache) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(jsapi_ticket_cache, <span class="string">'jsapi_ticket_cache'</span>)</span><br><span class="line">    jsapi_ticket = jsapi_ticket_cache</span><br><span class="line">    next()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    request(<span class="string">'https://qyapi.weixin.qq.com/cgi-bin/get_jsapi_ticket'</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        qs: &#123;</span><br><span class="line">          access_token</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      (error, response, body) =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"***********getJsapiToken middle**********"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> info = <span class="built_in">JSON</span>.parse(body)</span><br><span class="line">        jsapi_ticket = info.ticket</span><br><span class="line">        cache.put(access_token, jsapi_ticket, expire_time);</span><br><span class="line"></span><br><span class="line">        next()</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> getSignature = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">query</span>: &#123; url &#125; &#125; = req</span><br><span class="line">  <span class="keyword">let</span> noncestr = <span class="string">"test"</span></span><br><span class="line">  <span class="keyword">let</span> timestamp = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()</span><br><span class="line">  <span class="keyword">let</span> string1 = <span class="string">`jsapi_ticket=<span class="subst">$&#123;jsapi_ticket&#125;</span>&amp;noncestr=<span class="subst">$&#123;noncestr&#125;</span>&amp;timestamp=<span class="subst">$&#123;timestamp&#125;</span>&amp;url=<span class="subst">$&#123;url&#125;</span>`</span></span><br><span class="line">  <span class="keyword">let</span> signature = sha1(string1)</span><br><span class="line">  <span class="keyword">let</span> resObj = &#123;</span><br><span class="line">    signature, timestamp, <span class="attr">nonceStr</span>: noncestr</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> data = &#123; <span class="attr">data</span>: resObj &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>().getHours() + <span class="string">':'</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().getMinutes())</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"*********** end **********"</span>)</span><br><span class="line">  <span class="keyword">return</span> res.send(data)</span><br><span class="line">&#125;</span><br><span class="line">exports.getAccessToken = getAccessToken</span><br><span class="line">exports.getJsapiToken = getJsapiToken</span><br><span class="line">exports.getSignature = getSignature</span><br></pre></td></tr></table></figure></p>
<p>然后可以启动服务，在客户端调用这个接口<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node server</span><br></pre></td></tr></table></figure></p>
<p>在企业微信中调用这个接口的话需要url经过<a href="#valid">验证</a>，（这里想在本地开发环境使用的话，需要用内网穿透工具映射自己的服务到公网，我们用的是钉钉的工具）<br>客户端代码：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.get(<span class="string">'/wx/getSignature'</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    params: &#123;</span><br><span class="line">      <span class="comment">// 这三个参数跟在企业微信的管理页面可以拿到和配置</span></span><br><span class="line">      corpid:<span class="string">"ww184db0f35d1176d3"</span>,</span><br><span class="line">      corpsecret:<span class="string">"XgqQTQgJUyBQstkJ_4b0Xemav1wkUGqdXQ8YiTFYT4M"</span>,</span><br><span class="line">      url: <span class="string">'http://bnddk.vaiwan.com/'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    wx.config(&#123;</span><br><span class="line">      beta: <span class="literal">true</span>,<span class="comment">// 必须这么写，否则wx.invoke调用形式的jsapi会有问题</span></span><br><span class="line">      <span class="comment">// debug: true, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</span></span><br><span class="line">      ...res.data, <span class="comment">// /wx/getSignature接口返回参数</span></span><br><span class="line">      jsApiList: [</span><br><span class="line">        <span class="string">'chooseImage'</span>,</span><br><span class="line">        <span class="string">'getLocalImgData'</span>,</span><br><span class="line">        <span class="string">'uploadImage'</span>,</span><br><span class="line">      ] <span class="comment">// 必填，需要使用的JS接口列表，所有JS接口列表见附录2</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></p>
<p>成功之后就可以在项目中调用wx的api了</p>
<h2 id="封装微信api"><a href="#封装微信api" class="headerlink" title="封装微信api"></a>封装微信api</h2><p>微信的api不方便的地方就是参数多，回调也作为参数对象的属性，写起来很不舒服，所以我把一些api做了promise处理，很简单，就是把wx的api包进Promise里，在成功回调调用resolve，失败的回调调用reject<br>以选择图片为例：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> wxChooseImage = <span class="function">(<span class="params">count = <span class="number">4</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    wx.chooseImage(&#123;</span><br><span class="line">      count: count, <span class="comment">// 默认9</span></span><br><span class="line">      sizeType: [<span class="string">"original"</span>, <span class="string">"compressed"</span>], <span class="comment">// 可以指定是原图还是压缩图，默认二者都有</span></span><br><span class="line">      sourceType: [<span class="string">"album"</span>, <span class="string">"camera"</span>], <span class="comment">// 可以指定来源是相册还是相机，默认二者都有</span></span><br><span class="line">      defaultCameraMode: <span class="string">"batch"</span>, <span class="comment">//表示进入拍照界面的默认模式，目前有normal与batch两种选择，normal表示普通单拍模式，batch表示连拍模式，不传该参数则为normal模式。（注：用户进入拍照界面仍然可自由切换两种模式）</span></span><br><span class="line">      success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> localIds = res.localIds; <span class="comment">// 返回选定照片的本地ID列表，</span></span><br><span class="line">        resolve(localIds)</span><br><span class="line">        <span class="comment">// andriod中localId可以作为img标签的src属性显示图片；</span></span><br><span class="line">        <span class="comment">// 而在IOS中需通过上面的接口getLocalImgData获取图片base64数据，从而用于img标签的显示</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> wxGetLocalImgData = <span class="function">(<span class="params">localId</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!localId) reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'localId 为空'</span>));</span><br><span class="line">    wx.getLocalImgData(&#123;</span><br><span class="line">      localId: localId, <span class="comment">// 图片的localID</span></span><br><span class="line">      success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> localData = res.localData; <span class="comment">// localData是图片的base64数据，可以用img标签显示</span></span><br><span class="line">        resolve(localData)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Array&#125;</span> <span class="variable">localIds</span></span></span></span><br><span class="line"><span class="comment"> * 配合上面两个使用</span></span><br><span class="line"><span class="comment"> * Usage:</span></span><br><span class="line"><span class="comment"> * wxChooseImage()</span></span><br><span class="line"><span class="comment">    .then(localIds =&gt; &#123;</span></span><br><span class="line"><span class="comment">      return getAllLocalImgData(localIds);</span></span><br><span class="line"><span class="comment">    &#125;)</span></span><br><span class="line"><span class="comment">    .then(LocalImgData =&gt; &#123;</span></span><br><span class="line"><span class="comment">      this.imageArr = LocalImgData;</span></span><br><span class="line"><span class="comment">    &#125;)</span></span><br><span class="line"><span class="comment">    .catch(e =&gt; &#123;&#125;);</span></span><br><span class="line"><span class="comment">    <span class="doctag">@returns <span class="type">&#123;Array&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getAllLocalImgData = <span class="function">(<span class="params">localIds</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.all(localIds.map(<span class="function"><span class="params">element</span> =&gt;</span> wxGetLocalImgData(element)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a><span id="valid">验证</span></h2><p>在企业微信管理后台，我们要对自己服务所在的url进行验证后才能正常调用微信的api，<br>微信的验证方式是对你配置的url进行访问，你需要放一个微信提供的txt文件在静态资源中，使其通过url可以访问到（比如访问<a href="http://localhost:8080/WW_verify_8ocsL2HqKAyGwbf9是直接访问资源目录中名为WW_verify_8ocsL2HqKAyGwbf9的文件），但是我们的项目使用的是vue，这种url最终回被路由拦住，所以我饿每年要通过webpack配置，把对应名称的文件当作资源能被访问到" target="_blank" rel="noopener">http://localhost:8080/WW_verify_8ocsL2HqKAyGwbf9是直接访问资源目录中名为WW_verify_8ocsL2HqKAyGwbf9的文件），但是我们的项目使用的是vue，这种url最终回被路由拦住，所以我饿每年要通过webpack配置，把对应名称的文件当作资源能被访问到</a><br>需要把文件放在项目中的是static文件夹中，在webpack配置文件中通过CopyWebpackPlugin：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// copy custom static assets</span></span><br><span class="line">  <span class="keyword">new</span> CopyWebpackPlugin([</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">from</span>: path.resolve(__dirname, <span class="string">'../static/WW_verify_8ocsL2HqKAyGwbf9.txt'</span>),</span><br><span class="line">      to: <span class="string">'WW_verify_8ocsL2HqKAyGwbf9.txt'</span>,</span><br><span class="line">      toType: <span class="string">'file'</span></span><br><span class="line">    &#125;</span><br><span class="line">  ])</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<p>这样就可以通过url直接访问到文件资源了</p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>微信相关开发</tag>
      </tags>
  </entry>
  <entry>
    <title>跳过hexo渲染创建自定义页面</title>
    <url>/2017/09/21/skip-render/</url>
    <content><![CDATA[<p>侧边栏中有个”关于”的链接，这个地方想放上自定义的跟主题无关的页面，这时就不要使用<code>hexo</code>命令来创建了</p>
<ul>
<li>在项目根目录的source文件夹下创建一个文件夹，把写好的html页面放进去</li>
<li><p>在html文件的开头加上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">layout: <span class="literal">false</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure>
</li>
<li><p>此命令会让hexo渲染跳过这个页面</p>
</li>
<li>最后在<code>主题配置文件中</code>的<code>about</code>选项中填上路径<a id="more"></a>
</li>
</ul>
<hr>
<p>自定义页面所用的静态资源如js，css和图片等可以正常放在页面所在目录下，但是如果你是用的是github pages，建议你将资源放在云端，毕竟github只提供300M的免费空间。</p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>读 《 赡养人类 》</title>
    <url>/2017/10/24/read%20book-syrl/</url>
    <content><![CDATA[<p>资本主义是什么？这是我从第一次听到这个名词开始就有的疑问，但是也从来没有认真探究过，直到近日读了大刘的《赡养人类》，彷佛明白了点什么。文中描述了在未来科技高度发展的情况下，人类财富的分配情况。<br><a id="more"></a></p>
<p>由于原文实在精彩，本人又不擅言辞，在此放下一段原文。<br>这是来自两个文明的人类对话：</p>
<blockquote>
<p>“两个人类文明十分相似，你们走过的路我们都走过，我们也有过你们现在的<br>时代：社会财富的分配虽然不匀，但维持着某种平衡，穷人和富人都不是太多，人<br>们普遍相信，随着社会的进步，贫富差距将进一步减小，他们憧憬着人人均富的大<br>同时代。但人们很快会发现事情要复杂得多，这种平衡很快就要被打破了。”<br>“被什么东西打破的?”<br>“教育。你也知道，在你们目前的时代，教育是社会下层进入上层的惟一途<br>径，如果社会是一个按温度和含盐度分成许多水层的海洋，教育就像一根连通管，<br>将海底水层和海面水层连接起来，使各个水层之间不至于完全隔绝。”<br>“你接下来可能想说，穷人越来越上不起大学了。”<br>“是的，高等教育费用日益昂贵，渐渐成了精英子女的特权。但就传统教育而<br>言，即使仅仅是为了市场的考虑，它的价格还是有一定限度的，所以那条连通管虽<br>然已经细若游丝，但还是存在着。可有一天，教育突然发生了根本的变化，一个技<br>术飞跃出现了。 ”<br>“是不是可以直接向大脑里灌知识了?”<br>“是的，但知识的直接注入只是其中的一部分。<br>大脑中将被植入一台超级计算机，它的容量远大于人脑本身，它存贮的知识可<br>变为植入者的清晰记忆。但这只是它的一个次要功能，它是一个智力放大器，一个<br>思想放大器，可将人的思维提升到一个新的层次。<br>这时，知识、智力、深刻的思想，甚至完美的心理和性格、艺术审美能力等<br>等，都成了商品，都可以买得到”<br>“一定很贵。”<br>“是的，很贵，将你们目前的货币价值做个对比，一个人接受超等教育的费<br>用，与在北京或上海的黄金地段买两到三套一百五十平米的商品房相当。”<br>“要是这样，还是有一部分人能支付得起的。”<br>“是的，但只是一小部分有产阶层，社会海洋中那条连通上下层的管道彻底中<br>断了。完成超等教育的人的智力比普通人高出一个层次，他们与未接受超等教育的<br>人之间的智力差异，就像后者与狗之间的差异一样大。同样的差异还表现在许多其<br>他方面，比如艺术感受能力等。于是，这些超级知识阶层就形成了自己的文化，而<br>其余的人对这种文化完全不可理解，就像狗不理解交响乐一样。超级知识分子可能<br>都精通上百种语言，在某种场合，对某个人，都要按礼节使用相应的语言。在这种<br>情况下，在超级知识阶层看来，他们与普通民众的交流，就像我们与狗的交流一样<br>简陋了……于是，一件事就自然而然地发生了，你是个聪明人，应该能想到。”<br><!--more--></p>
<p>“富人和穷人已经不是同一个……同一个……”<br>“富人和穷人已经不是同一个物种了，就像穷人和狗不是同一个物种一样，穷<br>人不再是人了。”<br>“哦，那事情可真的变了很多。”<br>“变了很多，首先，你开始提到的那个维持社会财富平衡、限制穷人数量的因<br>素不存在了。即使狗的数量远多于人，他们也无力制造社会不稳定，只能制造一些<br>需要费神去解决的麻烦。随便杀狗是要受惩罚的，但与杀人毕竟不一样，特别是当<br>狂犬病危及到人的安全时，把狗杀光也是可以的。对穷人的同情，关键在于一个同<br>字，当双方相同的物种基础不存在时，同情也就不存在了。这是人类的第二次进<br>化，第一次与猿分开来，靠的是自然选择；这一次与穷人分开来，靠的是另一条同<br>样神圣的法则：私有财产不可侵犯。” </p>
<p>“这法则在我们的世界也很神圣的。”<br>“在第一地球的世界里，这项法则由一个叫社会机器的系统维持。社会机器是<br>一种强有力的执法系统，它的执法单元遍布世界的每一个角落，有的执法单元只有<br>蚊子大小，但足以在瞬间同时击毙上百人。它们的法则不是你们那个阿西莫夫的三<br>定律，而是第一地球的宪法基本原则：私有财产不可侵犯。它们带来的并不是专<br>制，它们的执法是绝对公正的，并非倾向于有产阶层，如果穷人那点儿可怜的财产<br>受到威胁，他们也会根据宪法去保护的。 </p>
<p>“在社会机器强有力的保护下，第一地球的财富不断地向少数人集中。而技术<br>发展导致了另一件事，有产阶层不再需要无产阶层了。在你们的世界，富人还是需<br>要穷人的，工厂里总得有工人。但在第一地球，机器已经不需要人来操作了，高效<br>率的机器人可以做一切事情，无产阶层连出卖劳动力的机会都没有了，他们真的一<br>贫如洗。这种情况的出现，完全改变了第一地球的经济实质，大大加快了社会财富<br>向少数人集中的速度。 </p>
<p>“财富集中的过程十分复杂，我向你说不清楚，但其实质与你们世界的资本运<br>作是相同的。在我曾祖父的时代，第一地球60％的财富掌握在一千万人手中；在爷<br>爷的时代，世界财富的80％掌握在一万人手中；在爸爸的时代，财富的90％掌握在<br>四十二人手中。<br>“在我出生时，第一地球的资本主义达到了顶峰上的顶峰，创造了令人难以置<br>信的资本奇迹；99％的世界财富掌握在一个人的手中！这个人被称做终产者。<br>“这个世界的其余二十多亿人虽然也有贫富差距，但他们总体拥有的财富只是<br>世界财富总量的l％，也就是说，第一地球变成了由一个富人和二十亿个穷人组成<br>的世界，穷人是二十亿，不是我刚才告诉你的十亿，而富人只有一个。这时，私有<br>财产不可侵犯的宪法仍然有效，社会机器仍在忠实地履行着它的职责，保护着那一<br>个富人的私有财产。 </p>
<p>“想知道终产者拥有什么吗?他拥有整个第一地球！这个行星上所有的大陆和海<br>洋都是他家的客厅和庭院，甚至第一地球的大气层都是他私人的财产。<br>“剩下的二十亿穷人，他们的家庭都住在全封闭的住宅中，这些住宅本身就是<br>一个自给自足的微型生态循环系统，他们用自己拥有的那可怜的一点点水、空气和<br>土壤等资源在这全封闭的小世界中生活着，能从外界索取的，只有不属于终产者的<br>太阳能了。<br>“我的家坐落在一条小河边，周围是绿色的草地，一直延伸到河沿，再延伸到<br>河对岸翠绿的群山脚下，在家里就能听到群鸟呜叫和鱼儿跃出水面的声音，能看到<br>悠然的鹿群在河边饮水，特别是草地在和风中的波纹最让我陶醉。但这一切不属于<br>我们，我们的家与外界严格隔绝，我们的窗是密封舷窗，永远都不能开的。要想外<br>出，必须经过一段过渡舱，就像从飞船进入太空一样，事实上，我们的家就像一艘<br>宇宙飞船，不同的是，恶劣的环境不是在外面而是在里面！我们只能呼吸家庭生态<br>循环系统提供的污浊的空气，喝经千万次循环过滤的水，吃以我们的排泄物为原料<br>合成再生的难以下咽的食物。而与我们仅一墙之隔，就是广阔而富饶的大自然，我<br>们外出时，穿着像一名宇航员，食物和水要自带，甚至自带氧气瓶，因为外面的空<br>气不属于我们，是终产者的财产。 </p>
<p>“当然，有时也可以奢侈一下，比如在婚礼或节日什么的，这时我们走出自己<br>全封闭的家，来到第一地球的大自然中，最令人陶醉的是呼吸第一口大自然的空气<br>时，那空气是微甜的，甜得让你流泪。但这是要花钱的，外出之前我们都得吞下一<br>粒药丸大小的空气售货机，这种装置能够监测和统计我们吸入空气的量，我们每呼<br>吸一次，银行账户上的钱就被扣除一点。对于穷人，这真的是一种奢侈，每年也只<br>能有一两次。我们来到外面时，也不敢剧烈活动，甚至不动只是坐着，以控制自己<br>的呼吸量。回家前还要仔细地刮刮鞋底，因为外面的土壤也不属于我们。 </p>
<p>“现在告诉你我母亲是怎么死的。为了节省开支，她那时已经有三年没有到户<br>外去过一次了，节日也舍不得出去。这天深夜，她竟在梦游中通过过渡门到了户<br>外！她当时做的一定是一个置身于大自然中的梦。当执法单元发现她时，她已经离<br>家有很远的距离了，执法单元也发现了她没有吞下空气售货机，就把她朝家里拖，<br>同时用一只机械手卡住她的脖子，它并没想掐死她，只是不让她呼吸，以保护另一<br>个公民不可侵犯的私有财产——空气。但到家时她已经被掐死了，执法单元放下她的<br>尸体对我们说：她犯了盗窃罪。我们要被罚款，但我们已经没有钱了，于是母亲的<br>遗体就被没收抵账。要知道，对一个穷人家庭来说，一个人的遗体是很宝贵的，占<br>它重量70％的是水啊，还有其他有用的资源。但遗体的价值还不够交纳罚款，社会<br>机器便从我们家抽走了相当数量的空气。 </p>
<p>“我们家生态循环系统中的空气本来已经严重不足，一直没钱补充，在被抽走<br>一部分后，已经威胁到了内部成员的生存。为了补充失去的空气，生态系统不得不<br>电解一部分水，这个操作使得整个系统的状况急剧恶化。主控电脑发出了警报：如<br>果我们不向系统中及时补充十五升水的话，系统将在三十小时后崩溃。警报灯的红<br>色光芒迷漫在每个房间。我们曾打算到外面的河里偷些水，但旋即放弃了，因为我<br>们打到水后还来不及走回家，就会被无所不在的执法单元击毙。父亲沉思了一会<br>儿，让我不要担心，先睡觉。虽然处于巨大的恐惧中，但在缺氧的状态下，我还是<br>睡着了。不知过了多长时间，一个机器人推醒了我，它是从与我家对接的一辆资源<br>转换车上进来的，它指着旁边一桶清澈晶莹的水说：这就是你父亲。资源转换车是<br>一种将人体转换成能为家庭生态循环系统所用资源的流动装置，父亲就是在那里将<br>自己体内的水全部提取出来，而这时，就在离我家不到一百米处，那条美丽的河在<br>月光下哗哗地流着。资源转换车从他的身体还提取了其他一些对生态循环系统有用<br>的东西：一盒有机油脂、一瓶钙片，甚至还有硬币那么大的一小片铁。 </p>
<p>“父亲的水拯救了我家的生态循环系统，我一个人活了下来，一天天长大，五<br>年过去了。在一个秋天的黄昏，我从舷窗望出去，突然发现河边有一个人在跑步，<br>我惊奇是谁这么奢侈，竟舍得在户外这样呼吸?！仔细一看，天啊，竟是终产者！<br>他慢下来，放松地散着步，然后坐在河边的一块石头上，将一只赤脚伸进清澈的河<br>水里。他看上去是一个健壮的中年男人，但实际已经两千多岁了，基因工程技术还<br>可以保证他再活这么长时间，甚至永远活下去。不过在我看来，他真的是一个很普<br>通的人。 </p>
<p>“又过了两年，我家的生态循环系统的运行状况再次恶化，这样小规模的生态<br>系统，它的寿命肯定是有限的。终于，它完全崩溃了。空气中的含氧量在不断减<br>少，在缺氧昏迷之前，我吞下了一枚空气售货机，走出了家门。像每一个家庭生态<br>循环系统崩溃的人一样，我坦然地面对着自己的命运：呼吸完我在银行那可怜的存<br>款，然后被执法机器掐死或击毙。 </p>
<p>“这时我发现外面的人很多，家庭生态循环系统开始大批量地崩溃了。一个巨<br>大的执法机器悬浮在我们上空，播放着最后的警告：公民们，你们闯入了别人的家<br>里，你们犯了私闯民宅罪，请尽快离开！不然……离开?我们能到哪里去?自己的家中<br>已经没有可供呼吸的空气了。<br>“我与其他人一起，在河边碧绿的草地上尽情地奔跑，让清甜的春风吹过我们<br>苍白的面庞，让生命疯狂地燃烧……<br>“不知过了多长时间，我们突然发现自己银行里的存款早就呼吸完了，但执法<br>单元们并没有采取行动。这时，从悬浮在空中的那个巨型执法单元中传出了终产者<br>的声音。<br>“‘各位好，欢迎光临寒舍！有这么多的客人我很高兴，也希望你们在我的院子<br>里玩得愉快，但还是请大家体谅我，你们来的人实在是太多了。现在。全球已有近<br>十亿人因生态循环系统崩溃而走出了自己的家，来到我家，另外那十多亿可能也快<br>来了，你们是擅自闯入，侵犯了我这个公民的居住权和隐私权，社会机器采取行动<br>终止你们的生命是完全合理合法的，如果不是我劝止了它们那么做，你们早就全部<br>被激光蒸发了。但我确实劝止了他们，我是个受过多次超等教育的有教养的人，对<br>家里的客人，哪怕是违法闯入者，都是讲礼貌的。但请你们设身处地地为我想想，<br>家里来了二十亿客人，毕竟是稍微多了些，我是个喜欢安静和独处的人，所以还是<br>请你们离开寒舍。我当然知道大家在地球上无处可去，但我为你们，为二十亿人准<br>备了两万艘巨型宇宙飞船，每艘都有一座中等城市大小，能以光速的百分之一航<br>行。上面虽没有完善的生态循环系统，但有足够容纳所有人的生命冷藏舱，足够支<br>持五万年。我们的星系中只有地球这一颗行星，所以你们只好在恒星际间寻找自己<br>新的家园，但相信一定能找到的。宇宙之大，何必非要挤在我这间小小的陋室中<br>呢?你们没有理由恨我，得到这幢住所，我是完全合理合法的，我从一个经营妇女<br>卫生用品的小公司起家，一直做到今天的规模，完全是凭借自己的商业才能，没有<br>做过任何违法的事，所以，社会机器在以前保护了我，以后也会继续保护我，保护<br>我这个守法公民的私有财产，它不会容忍你们的违法行径，所以，还是请大家尽快<br>动身吧，看在同一进化渊源的份上，我会记住你们的，也希望你们记住我,保重<br>吧。’“我们就是这样来到了第四地球，航程延续了三万年，在漫长的星际流浪中，<br>损失了近一半的飞船，有的淹没于星际尘埃中，有的被黑洞吞食，……但，总算有一<br>万艘飞船，十亿人到达了这个世界。好了，这就是第一地球的故事，二十亿个穷人<br>和一个富人的故事。” </p>
</blockquote>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>科幻</tag>
        <tag>刘慈欣</tag>
      </tags>
  </entry>
  <entry>
    <title>canvas调研记录</title>
    <url>/2020/01/13/canvas/</url>
    <content><![CDATA[<p>去年的一次需求中涉及到图片打码功能，整理并记录当时的思路，以及后来的一些发散思考。<br><a id="more"></a></p>
<h1 id="【canvas】记一次图片打码需求调研"><a href="#【canvas】记一次图片打码需求调研" class="headerlink" title="【canvas】记一次图片打码需求调研"></a>【canvas】记一次图片打码需求调研</h1><p><em>这里的打码都是指毛玻璃效果(高斯模糊)，不过根据我的思路马赛克或其他效果都是可以实现的</em></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>接下来我会以实现图片打码为目标介绍一些思路和技术方案，在文末还会介绍一些有趣的图像处理功能，都是基于调研过程中了解到的api实现的，比如抠图、千图成像、绿幕技术，感兴趣的话可以一起了解下。</p>
<h3 id="canvas"><a href="#canvas" class="headerlink" title="canvas"></a>canvas</h3><blockquote>
<p> HTML 的 &lt;canvas&gt; 元素提供了一个空白绘图区域，可以使用 APIs （比如 Canvas 2D 或 WebGL）来绘制图形。   </p>
</blockquote>
<p>以上是<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Canvas" target="_blank" rel="noopener">MDN</a>对canvas的介绍，既然是用来绘制图形的，可能大部分同学并没有接触过此类需求，对canvas处于听过看过没用过的状态。   </p>
<p>下面我来快速介绍一下如何用canvas在浏览器上绘制出一个图形，这样大家就都在同一起跑线上了。</p>
<p>或者你可以在MDN上了解<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial/Basic_usage" target="_blank" rel="noopener">canvas的基本用法</a>然后跳过这部分。      </p>
<h3 id="快速介绍"><a href="#快速介绍" class="headerlink" title="快速介绍"></a>快速介绍</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D" target="_blank" rel="noopener">CanvasRenderingContext2D</a>(渲染上下文)是canvas的一个重要对象，通过在&lt;canvas&gt;上调用getContext()并传入一个<code>&#39;2d&#39;</code>参数来获得，获得这个渲染上下文后就可以对该&lt;canvas&gt;上进行绘制操作了。<br>所以在使用canvas绘图时，起手来一个getContext是必不可少的   </p>
<p><em><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLCanvasElement/getContext" target="_blank" rel="noopener">getContext()</a>还可以传入<code>&#39;webgl&#39;</code>来获取三维上下文进行3d绘图。 既然&lt;canvas&gt;是画布，我觉得这些上下文可以理解成画笔，2d画笔画2d，3d画笔画3d</em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"tutorial"</span> <span class="attr">width</span>=<span class="string">"150"</span> <span class="attr">height</span>=<span class="string">"150"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'tutorial'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</span></span><br><span class="line">    ctx.fillRect(25, 25, 100, 100);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面这段代码就是获取canvas2d上下文后调用了<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/fillRect" target="_blank" rel="noopener">fillRect</a>在&lt;canvas&gt;上绘制了一个矩形，位置在&lt;canvas&gt;的左上起(25，25)处，长宽为100，默认颜色是#000   </p>
<p><img src="https://raw.githubusercontent.com/zwlafk/canvas/master/assets/16f8df51f021337d.jpg" alt><br>除了绘制矩形外，这个渲染上下文还提供了其他许多<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D" target="_blank" rel="noopener">API</a>用以实现各种绘图需求，比如绘制文本、<strong>绘制路径、绘制图像、像素控制</strong>、旋转变换等，接下来我只在用到的时候介绍他们。    </p>
<h2 id="技术方案"><a href="#技术方案" class="headerlink" title="技术方案"></a>技术方案</h2><p>图片打码的需求简单描述下就是：通过浏览器上传一张图片，展示该图片后点击图片任何区域，该区域被打码，可以将打码后的图片保存或上传   </p>
<p><em>高斯模糊的<a href="http://www.ruanyifeng.com/blog/2012/11/gaussian_blur.html" target="_blank" rel="noopener">原理及算法</a>这里就不介绍了，可以直接使用现成的库<a href="https://www.npmjs.com/package/stackblur-canvas" target="_blank" rel="noopener">stackblur</a>来处理，需要马赛克等其他效果也可以找到相应的库</em>   </p>
<p>这就需要canvas能做到下面几点:    </p>
<ol>
<li>能把图片写入canvas</li>
<li>能获取canvas指定位置的像素，能原地修改像素值更好</li>
<li>能保存当前canvas为图片或base64数据   </li>
</ol>
<p>看一下<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D" target="_blank" rel="noopener">API列表</a>，初步思考技术方案：   </p>
<ol>
<li>用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/drawImage" target="_blank" rel="noopener">drawImage()</a>将图片写入&lt;canvas&gt;   </li>
<li>用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/getImageData" target="_blank" rel="noopener">getImageData()</a>获取像素数据，这里得到的数据中包含一个一维数组，数组的元素是图片所有像素点的rgba值，遍历这个数组，监听mousedown和mousemove事件，找到对应位置的像素点，计算并修改为打码后的新像素值，由于无法原地修改，所以修改之后需要重新调用drawImage，将打过码后的图像绘入&lt;canvas&gt;</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLCanvasElement" target="_blank" rel="noopener">HTMLCanvasElement</a>提供了<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLCanvasElement/toDataURL" target="_blank" rel="noopener">canvas.toDataURL()</a>和<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLCanvasElement/toBlob" target="_blank" rel="noopener">canvas.toBlob()</a>方法，调用后可以获得当前画布中展示图像的base64数据或blob对象，可以用来展示或者下载上传   </li>
</ol>
<p><em>这里提到要用drawImage的地方都可以替换为<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/putImageData" target="_blank" rel="noopener">putImageData</a>，二者区别会在文末介绍</em></p>
<p>根据上面的技术方案，落地成代码就是：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入stackblur.js 处理高斯模糊区域--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/stackblur-canvas/2.2.0/stackblur.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas1"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas1"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> context = canvas.getContext(<span class="string">"2d"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> imgObj = <span class="keyword">new</span> Image();</span></span><br><span class="line"><span class="javascript">    imgObj.src = <span class="string">'../img.jpg'</span>;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//待图片加载完后，将其显示在canvas上</span></span></span><br><span class="line"><span class="javascript">    imgObj.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        canvas.style.width = <span class="keyword">this</span>.width + <span class="string">"px"</span>;</span></span><br><span class="line"><span class="javascript">        canvas.style.height = <span class="keyword">this</span>.height + <span class="string">"px"</span>;</span></span><br><span class="line"><span class="javascript">        canvas.width = <span class="keyword">this</span>.width;</span></span><br><span class="line"><span class="javascript">        canvas.height = <span class="keyword">this</span>.height;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 调用drawImage在canvas上绘制此图</span></span></span><br><span class="line"><span class="javascript">        context.drawImage(<span class="keyword">this</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>.width, <span class="keyword">this</span>.height);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 开始监听鼠标事件</span></span></span><br><span class="line">        initEventListener();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">initEventListener</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        canvas.onmousedown = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> ev = ev || <span class="built_in">window</span>.event;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> dx = ev.clientX - canvas.offsetLeft;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> dy = ev.clientY - canvas.offsetTop;</span></span><br><span class="line">            drawLine(dx, dy);</span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> ev = ev || <span class="built_in">window</span>.event;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> mx = ev.clientX - canvas.offsetLeft;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> my = ev.clientY - canvas.offsetTop;</span></span><br><span class="line">                drawLine(mx, my);</span><br><span class="line">            &#125;;</span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.onmouseup = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.onmousemove = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.onmouseup = <span class="literal">null</span>;</span></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">drawLine</span>(<span class="params">dx, dy</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 在canvas 距离左上角dx - 15, dy - 15的位置生成一个矩形高斯模糊区域，大小为30*30，模糊半径为10(模糊半径越大打码效果越强)</span></span></span><br><span class="line">        StackBlur.canvasRGBA(canvas, dx - 15, dy - 15, 30, 30, 10);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><em>方案中描述调用getImageData()后处理像素点的操作由<a href="https://github.com/flozz/StackBlur/blob/master/src/stackblur.js#L441" target="_blank" rel="noopener">StackBlur.canvasRGBA</a>完成</em></p>
<p>效果：<br><img src="https://raw.githubusercontent.com/zwlafk/canvas/master/assets/16fac1538feb1839.gif" alt="效果"><br><a href="https://zwlafk.github.io/snippets/canvas/gaussian-blur/plan1.html">demo</a><br><a href="https://github.com/zwlafk/canvas/blob/master/gaussian-blur/plan1.html" target="_blank" rel="noopener">完整代码</a></p>
<p>虽然能用，但有两个小问题：</p>
<ol>
<li>每次只能处理一个矩形，可能圆形更符合设计和体验</li>
<li>鼠标移动速度过快时，打码路径不连续      </li>
</ol>
<p>这两个问题也是可以解决的：   </p>
<ol>
<li>第一个问题我们可能要深入<a href="https://www.npmjs.com/package/stackblur-canvas" target="_blank" rel="noopener">stackblur</a>内部，算出需要进行高斯模糊的圆形边界坐标集合，模糊处理时只处理圆内的像素</li>
<li>第二个问题是由于我们每次处理的区域只是一个点，要解决的话需要丰富一下onmousemove的逻辑，每个点跟之前的点相连，形成一条路径，对连线路径也进行模糊处理    </li>
</ol>
<p>这两个问题解决难点在于要计算一系列点坐标确定边界，只对边界内的像素模糊处理，需要用到高中数学知识，勾股定理，相似三角形等，非常的可怕   </p>
<p><em>接下来是梦回高中环节，可以直接跳过看 <a href="#新的技术方案">新的技术方案</a></em>   </p>
<p>首先有常量<code>size</code>表示画笔粗细，在mousemove中拿到两个点<code>P1，P2</code>坐标已知，可以确定一条直线l: <code>y=kx+b</code>(为了方便介绍，我们假设这里以P1为原点，即方程为<code>y=kx</code>，实际中要变化坐标系计算)，这条直线延其垂直方向平移<code>正负size/2</code>可以确定两条直线l1，l2，以P1和P2为圆心半径为<code>size/2</code>确定的两个圆记为c1，c2。 l1，l2，c1，c2组成的区域就是我们要确定的待模糊处理的范围，如下图中的胶囊型区域</p>
<p><img src="https://raw.githubusercontent.com/zwlafk/canvas/master/assets/16f897b2593246c0.jpg" alt><br>常量<code>size/2</code>记做<code>r</code>，可以表示圆的半径和直线l平移的距离<br>经过计算，l1 ,l2的方程如下，需要分别讨论k &gt; 0和k &lt; 0的情况:    </p>
<p><img src="https://raw.githubusercontent.com/zwlafk/canvas/master/assets/16f897bedd4174df.jpg" alt></p>
<p><img src="https://raw.githubusercontent.com/zwlafk/canvas/master/assets/16f897c328fd786a.jpg" alt></p>
<p>圆的方程根据点坐标<code>(x1, y1)</code>就可以确定:    </p>
<p><img src="https://raw.githubusercontent.com/zwlafk/canvas/master/assets/16f898c2dc1ccbc6.jpg" alt></p>
<p>下面举两个🌰:   </p>
<ul>
<li>以size=10, P1(0, 0), P2(10, 16)即k&gt;0为例:<br><img src="https://raw.githubusercontent.com/zwlafk/canvas/master/assets/16f897ba30591d0b.jpg" alt></li>
<li>以size=10, P1(0, 0), P2(10, -16)即k&lt;0为例:<br><img src="https://raw.githubusercontent.com/zwlafk/canvas/master/assets/16f897cc1e355912.jpg" alt></li>
</ul>
<p>接着在遍历像素点的时候，把坐标代入这四个方程就可以判断该像素点是否在需要模糊的范围内了。   </p>
<hr>
<p>我们先知难而退，这个方案暂列为走投无路的最终方案 ,去捡回刚才掀飞的键盘再看一看<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D" target="_blank" rel="noopener">API列表</a>，把目光锁定在<code>线型</code>和<code>路径</code>上：   </p>
<p><img src="https://raw.githubusercontent.com/zwlafk/canvas/master/assets/16f897f1fc0ef6a1.jpg" alt></p>
<p><img src="https://raw.githubusercontent.com/zwlafk/canvas/master/assets/16f897f77e181a62.jpg" alt><br>看起来简直是为解决这两个问题量身定做的，线型端点可以设置成圆形，鼠标经过的轨迹点点相连可以连成一条路径，接下来只要在路径里填充进对应的模糊图像就可以了，<br>可惜绘制路径的相关api中并没有提这种自定义内容的填充，只能对路径进行纯色填充，所以这里的技术方案是无法使用路径来实现需求的    </p>
<p>那么我们可以以路径为核心来实现需求吗?    </p>
<p>当然可以，感受一下，上面我们按下鼠标来回划动的时候，像不像在用橡皮擦和刮刮乐，假设这里是刮刮乐的话，如果我们刮出的图像是模糊后的图像那不就大功告成了吗    </p>
<h2 id="新的技术方案"><a href="#新的技术方案" class="headerlink" title="新的技术方案"></a>新的技术方案</h2><p>我们的新方案是把这个需求当作刮刮乐来做，待刮涂层是原始图像，下面露出的奖项是被高斯模糊处理后的图像，刮开任何位置对应的都是该部位高斯模糊后的图像。    </p>
<p>接下来我们面临了两个新的问题：     </p>
<ol>
<li>在网上众多刮刮乐实现方案中，奖项涂层可以设置&lt;canvas&gt;的background来实现，也可以创建一个新的&lt;canvas&gt;来充当，要选哪种方案</li>
<li>新方案下如何得到最终图片数据进行下载上传       </li>
</ol>
<p>这就需要我们确定一件事: <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLCanvasElement/toDataURL" target="_blank" rel="noopener">canvas.toDataURL()</a>是否会连同canvas的background一起生成base64数据，如果不可以那就只能选用第二种刮刮乐方案: 双canvas，借助第三个canvas作为最终的容器，调用drawImage()按顺序写入我们的奖项canvas和涂层canvas，最后对这个容器调用toDataURL()得到base64数据    </p>
<p>经过测试background是不会写入toDataURL()生成的数据里的，所以我们的最终技术方案可以确定下来:     </p>
<ol>
<li>html中创建两个&lt;canvas&gt; 分别是「涂层」和「奖项」，涂层命名为upper-canvas，奖项层就称为canvas，upper-canvas用绝对定位置于canvas之上</li>
<li>图片加载完成后用drawImage把图片写入upper-canvas，用<a href="https://github.com/flozz/StackBlur/blob/master/dist/stackblur.js#L76" target="_blank" rel="noopener">StackBlur.image</a>将图片全部模糊处理后也用drawImage写入canvas</li>
<li>对upper-canvas赋予刮刮乐功能，具体原理就不讲了，网上一搜一麻袋。主要就是使用路径，结合<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial/Compositing" target="_blank" rel="noopener">globalCompositeOperation</a>属性，这个属性可以控制画新图形(路径)与已有图形的遮盖策略，通过把它设置为<code>destination-out</code>来实现刮刮乐效果 </li>
<li>借助一个容器&lt;canvas&gt;，调用drawImage写入canvas和upper-canvas的图像，这个容器&lt;canvas&gt;调用toDataURL即可拿到最终图片的base64数据</li>
</ol>
<p>用代码实现:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/stackblur-canvas/2.2.0/stackblur.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"upper-canvas"</span> <span class="attr">style</span>=<span class="string">"position: absolute; top: 0; left: 0;"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> upperCanvas = <span class="built_in">document</span>.getElementById(<span class="string">"upper-canvas"</span>),</span></span><br><span class="line"><span class="javascript">        upperContext = upperCanvas.getContext(<span class="string">"2d"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        upperContext.lineCap = <span class="string">"round"</span>;</span></span><br><span class="line"><span class="javascript">        upperContext.lineJoin = <span class="string">"round"</span>;</span></span><br><span class="line">        upperContext.lineWidth = size * 2;</span><br><span class="line"><span class="javascript">        upperContext.globalCompositeOperation = <span class="string">"destination-out"</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> x1, y1,<span class="comment">//绘制路径的起点坐标</span></span></span><br><span class="line">        size = 15;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>),</span></span><br><span class="line"><span class="javascript">        context = canvas.getContext(<span class="string">"2d"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> img = <span class="keyword">new</span> Image();</span></span><br><span class="line"><span class="javascript">    img.src = <span class="string">'../img.jpg'</span>;</span></span><br><span class="line"><span class="javascript">    img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 绘入原始图片</span></span></span><br><span class="line"><span class="javascript">        upperCanvas.style.width = <span class="keyword">this</span>.width + <span class="string">"px"</span>;</span></span><br><span class="line"><span class="javascript">        upperCanvas.style.height = <span class="keyword">this</span>.height + <span class="string">"px"</span>;</span></span><br><span class="line"><span class="javascript">        upperCanvas.width = <span class="keyword">this</span>.width;</span></span><br><span class="line"><span class="javascript">        upperCanvas.height = <span class="keyword">this</span>.height;</span></span><br><span class="line"><span class="javascript">        upperContext.drawImage(<span class="keyword">this</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>.width, <span class="keyword">this</span>.height);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">// 模糊处理图片, 绘入底部图片</span></span></span><br><span class="line"><span class="javascript">        StackBlur.image(<span class="keyword">this</span>, <span class="string">"canvas"</span>, <span class="number">10</span>);</span></span><br><span class="line"></span><br><span class="line">        tapClip();</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">getClipArea</span>(<span class="params">e, hastouch</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> x = hastouch ? e.targetTouches[<span class="number">0</span>].pageX : e.clientX;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> y = hastouch ? e.targetTouches[<span class="number">0</span>].pageY : e.clientY;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> ndom = upperCanvas;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">while</span> (ndom.tagName !== <span class="string">"BODY"</span>) &#123;</span></span><br><span class="line">            x -= ndom.offsetLeft;</span><br><span class="line">            y -= ndom.offsetTop;</span><br><span class="line">            ndom = ndom.parentNode;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line">            x: x,</span><br><span class="line">            y: y</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">tapClip</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> hastouch = <span class="string">"ontouchstart"</span> <span class="keyword">in</span> <span class="built_in">window</span> ? <span class="literal">true</span> : <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">            tapstart = hastouch ? <span class="string">"touchstart"</span> : <span class="string">"mousedown"</span>,</span></span><br><span class="line"><span class="javascript">            tapmove = hastouch ? <span class="string">"touchmove"</span> : <span class="string">"mousemove"</span>,</span></span><br><span class="line"><span class="javascript">            tapend = hastouch ? <span class="string">"touchend"</span> : <span class="string">"mouseup"</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> area;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> x2, y2;</span></span><br><span class="line"><span class="javascript">        upperContext.lineCap = <span class="string">"round"</span>;</span></span><br><span class="line"><span class="javascript">        upperContext.lineJoin = <span class="string">"round"</span>;</span></span><br><span class="line">        upperContext.lineWidth = size * 2;</span><br><span class="line"><span class="javascript">        upperContext.globalCompositeOperation = <span class="string">"destination-out"</span>;</span></span><br><span class="line"><span class="javascript">        upperCanvas.addEventListener(tapstart, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line">            e.preventDefault();</span><br><span class="line">            area = getClipArea(e, hastouch);</span><br><span class="line">            x1 = area.x;</span><br><span class="line">            y1 = area.y;</span><br><span class="line">            drawLine(x1, y1);</span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.addEventListener(tapmove, tapmoveHandler);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.addEventListener(tapend, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.removeEventListener(tapmove, tapmoveHandler);</span></span><br><span class="line">            &#125;);</span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">tapmoveHandler</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line">                e.preventDefault();</span><br><span class="line">                area = getClipArea(e, hastouch);</span><br><span class="line">                x2 = area.x;</span><br><span class="line">                y2 = area.y;</span><br><span class="line">                drawLine(x1, y1, x2, y2);</span><br><span class="line">                x1 = x2;</span><br><span class="line">                y1 = y2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">drawLine</span>(<span class="params">x1, y1, x2, y2</span>) </span>&#123;</span></span><br><span class="line">        upperContext.beginPath();</span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="built_in">arguments</span>.length == <span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="javascript">            upperContext.arc(x1, y1, size, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI);</span></span><br><span class="line">            upperContext.fill();</span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line">            upperContext.moveTo(x1, y1);</span><br><span class="line">            upperContext.lineTo(x2, y2);</span><br><span class="line">            upperContext.stroke();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>借助一个canvas做容器实现下载的代码:<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 创建隐藏的可下载链接</span></span><br><span class="line">    <span class="keyword">let</span> eleLink = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">    eleLink.download = <span class="string">'filename'</span>;</span><br><span class="line">    eleLink.style.display = <span class="string">'none'</span>;</span><br><span class="line">    <span class="comment">// 创建一个canvas作为临时容器</span></span><br><span class="line">    <span class="keyword">let</span> tempCanvas = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>);</span><br><span class="line">    <span class="keyword">let</span> tempContext = tempCanvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line">    tempCanvas.width = upperCanvas.width;</span><br><span class="line">    tempCanvas.height = upperCanvas.height;</span><br><span class="line">    <span class="comment">// 按顺序绘入两层canvas</span></span><br><span class="line">    tempContext.drawImage(canvas, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    tempContext.drawImage(upperCanvas, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 图片转base64地址</span></span><br><span class="line">    eleLink.href = tempCanvas.toDataURL(<span class="string">'image/jpeg'</span>);</span><br><span class="line">    <span class="comment">// 触发点击</span></span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(eleLink);</span><br><span class="line">    eleLink.click();</span><br><span class="line">    <span class="comment">// 然后移除链接</span></span><br><span class="line">    <span class="built_in">document</span>.body.removeChild(eleLink);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>有些浏览器是支持<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/filter" target="_blank" rel="noopener">filter属性</a>的, 可以直接实现高斯模糊, 如果你的目标浏览器支持的话, 可以省去引入StackBlur    </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模糊处理图片, 绘入底部canvas</span></span><br><span class="line">canvas.style.width = <span class="keyword">this</span>.width + <span class="string">"px"</span>;</span><br><span class="line">canvas.style.height = <span class="keyword">this</span>.height + <span class="string">"px"</span>;</span><br><span class="line">canvas.width = <span class="keyword">this</span>.width;</span><br><span class="line">canvas.height = <span class="keyword">this</span>.height;</span><br><span class="line">context.filter = <span class="string">"blur(10px)"</span>;</span><br><span class="line">context.drawImage(<span class="keyword">this</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>.width, <span class="keyword">this</span>.height);</span><br><span class="line"><span class="comment">// StackBlur.image(this, "canvas", 10);</span></span><br></pre></td></tr></table></figure>
<p>效果:   </p>
<p><img src="https://raw.githubusercontent.com/zwlafk/canvas/master/assets/16fa81f21b0f5e09.gif" alt></p>
<p><a href="https://zwlafk.github.io/snippets/canvas/gaussian-blur/gaussian_blur.html">demo</a><br><a href="https://github.com/zwlafk/canvas/blob/master/gaussian-blur/gaussian_blur.html" target="_blank" rel="noopener">完整代码</a></p>
<p>到这里我们的需求就完全实现了，代码细节方面还很粗糙，方案是完全行得通的    </p>
<p>这个方案跟第一种方案相比，(这里假设第一种方案实现了😅)第一种方案在同一位置多次点击具有「码上加码」的特性，而刮刮乐方案中鼠标点多少次，模糊程度都是一样的，所以大家如果真的有这种需求，还是要跟产品确认下这个问题的。    </p>
<p>打码需求就到此为止了🎉，优化下细节就能使用了，如果你要的效果不是高斯模糊，相信你也能按照这个思路完美实现自己的需求，下面我会说说这次调研的一些思考与收获    </p>
<hr>
<p>上面提到过drawImage的都可以替换为putImageData，下面我来聊聊他们的区别</p>
<h2 id="drawImage-VS-putImageData"><a href="#drawImage-VS-putImageData" class="headerlink" title="drawImage VS putImageData"></a>drawImage VS putImageData</h2><p>二者主要区别在于如果要绘制的目标区域已经有了图像，drawImage会在目标区域已有图像上绘制，putImageData则会把目标区域已有图像清空后再绘制。最明显的案例就是如果要绘制一片透明图像到目标位置上，drawImage后整个图像看起来是没有变化的，putImageData后目标位置的图像会被清空。所以上面讲的新的方案里我们借助第三个canvas作为容器，导出数据下载图片时只能使用drawImage，putImageData虽然也保留了透明部分，但是会把下面的模糊图层清空。</p>
<p>另一个区别在于接收的图源类型不同，<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/drawImage" target="_blank" rel="noopener">drawImage</a>主要接收各种图像类html元素，比如img, video，或者另一个canvas<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/putImageData" target="_blank" rel="noopener">putImageData</a>只能接收<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/ImageData" target="_blank" rel="noopener">ImageData</a>作为图源<br>所以可以结合使用场景来选择绘制图片的方法，在处理完ImageData像素数据后直接调用putImageData会很方便(比如方案一)，单纯的希望图像元素变成canvas就直接用drawImage     </p>
<p><a href="https://jsperf.com/canvas-drawimage-vs-putimagedata/93" target="_blank" rel="noopener">在性能方面drawImage是明显优于putImageData的</a><br>putImageData绘图时会清空目标区域图像，性能又差，但并不能说它一无是处<br>几乎任何图片处理的底层原理都是通过修改ImageData像素数据实现的，而只有putImageData能够将ImageData变成图像，下面我来介绍下ImageData的一些应用</p>
<h2 id="One-more-thing"><a href="#One-more-thing" class="headerlink" title="One more thing"></a>One more thing</h2><blockquote>
<p>ImageData 接口描述 &lt;canvas&gt; 元素的一个隐含像素数据的区域。     </p>
</blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/ImageData" target="_blank" rel="noopener">ImageData</a>的data属性是一个Unit8类型的一维数组, 数组元素是这个图像的每个像素点的rgba值, 所以这个数组中每4个元素表示一个像素点, 分别代表rgba值, 浏览器根据ImageData的width和height属性结合data数组来绘制图像。     </p>
<p><em>rgba每个维度范围是0-255, 也对应这里的Unit8表示的范围, 即[0, 2^8-1]</em></p>
<p>上面提到过图片处理的底层原理都是通过修改ImageData像素实现的，下面我来介绍几个相关应用    </p>
<h3 id="抠图"><a href="#抠图" class="headerlink" title="抠图"></a>抠图</h3><p>通过遍历图像每个像素点，与目标像素对比，符合条件的就把当前的像素点rgba中的a设为0，即透明度完全透明，得到一个新的ImageData，调用putImageData把新的ImageData绘入canvas即可<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">imgObj.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    canvas.style.width = <span class="keyword">this</span>.width + <span class="string">"px"</span>;</span><br><span class="line">    canvas.style.height = <span class="keyword">this</span>.height + <span class="string">"px"</span>;</span><br><span class="line">    canvas.width = <span class="keyword">this</span>.width;</span><br><span class="line">    canvas.height = <span class="keyword">this</span>.height;</span><br><span class="line">    context.drawImage(<span class="keyword">this</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>.width, <span class="keyword">this</span>.height);</span><br><span class="line">    <span class="keyword">var</span> modifyImgData = context.getImageData(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</span><br><span class="line">    <span class="keyword">var</span> modifyPxData = modifyImgData.data;</span><br><span class="line">    <span class="keyword">let</span> l = modifyPxData.length / <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; l; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> r = modifyPxData[i * <span class="number">4</span> + <span class="number">0</span>];</span><br><span class="line">        <span class="keyword">let</span> g = modifyPxData[i * <span class="number">4</span> + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">let</span> b = modifyPxData[i * <span class="number">4</span> + <span class="number">2</span>];</span><br><span class="line">        <span class="keyword">if</span> (r &gt; <span class="number">100</span> &amp;&amp; g &gt; <span class="number">120</span> &amp;&amp; b &gt; <span class="number">120</span>)</span><br><span class="line">            modifyPxData[i * <span class="number">4</span> + <span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    context.putImageData(modifyImgData, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>上面的代码我抠掉了一张图片中<code>r &gt; 100 &amp;&amp; g &gt; 120 &amp;&amp; b &gt; 120</code>的像素，大概就是图中的天空，效果如下:        </p>
<p><img src="https://raw.githubusercontent.com/zwlafk/canvas/master/assets/16fac2bb803e4a6f.jpg" alt><br><a href="https://github.com/zwlafk/canvas/blob/master/koutu.html" target="_blank" rel="noopener">完整代码</a><br><em>以后可以自己换证件照底色了</em></p>
<h3 id="千图成像"><a href="#千图成像" class="headerlink" title="千图成像"></a>千图成像</h3><p><a href="https://en.wikipedia.org/wiki/Photographic_mosaic" target="_blank" rel="noopener">Photographic mosaic</a>，经典的案例就是<a href="https://bkimg.cdn.bcebos.com/pic/6159252dd42a283497b0a9d35db5c9ea14cebfd0@wm_1,g_7,k_d2F0ZXIvYmFpa2UyNzI=,xp_5,yp_5" target="_blank" rel="noopener">楚门的世界电影海报</a>      </p>
<p>了解过ImageData后在看这种图片，可以想像一下是把许多子图片作为一个个像素拼起来。这些子图片在缩小到一定程度时会表现出一个主要颜色，这个颜色与原图对应像素的rgb值越接近最终效果就越好。 所以这个需求实现起来需要先获取原图的ImageData，遍历每个像素点，获取该点的rgb值，以此值为标准，在子图库里寻找颜色最接近的子图<br>对于如何计算子图代表的颜色，以及颜色相近的判断标准是什么，我是这样想的(可能并不正确):      </p>
<ul>
<li>获取子图的ImageData，遍历像素数据，把每个像素的rgb累加后求和，得到一个平均值r，平均值g，平均值b，这个平均值代表这张图作为像素点时的颜色表现</li>
<li>判断颜色相近的办法，对于rgb表示的颜色来说，rgb就像三个维度，可以构建成一个立方体，两点之间的距离即可表示颜色差异程度，计算方法和立体几何中一样(求三段距离平方和再开方): <code>Math.sqrt(dr ** 2 + dg ** 2 + db ** 2)</code>     </li>
</ul>
<p><em>这里我使用rgb模型来计算颜色差异程度，换成hsv模型来计算会更精确</em><br><em>最终效果跟子图片质量也有关，子图片颜色越均匀效果越好</em>   </p>
<p>接下来就是把拿到的子图绘入新的大图里，所有的原始像素遍历完成, 这张大图就拼好了    </p>
<p><em>为了减少计算量可以把子图和原图压缩一下，比如原图800x800，在不允许子图重复的情况下组成他需要64万张子图，如果每张子图是20x20的，那么最终的结果图片就是16000x16000(按上面我们提到的1个像素4bytes来算，这张图大小约为0.9G，生成jpg或png会更大)。如果把原图压缩至40x40，就需要1600张子图，子图压缩至20x20，最终图片就是800x800。 效果当然是不压缩比较好，但这取决于你是否有这么多子图，生成速度也依赖计算机性能</em>     </p>
<p>下面是我把一张800x800的图片按照40x40的分辨率，子图为20x20生成了一张效果图，由于图源是从百度图片的接口爬来的，数量有限，这里我按照可以重复使用的策略来生成，所以效果并不太好，不过有个“造假”的办法，就是把原图设置一定的透明度再画到结果图上。   </p>
<p>下图左至右分别是 原图，结果图，造假图：    </p>
<p><img src="https://raw.githubusercontent.com/zwlafk/canvas/master/assets/16f8a1dff35481ef.jpg" alt><br>这里我用了百度图片的搜索接口来获取子图源，为了把请求来的图片数据落地到本地以方便调用，而且要进行大量的计算，这部分我就用nodejs来写了。node只是js的运行环境，没有创建DOM和使用DOM api的能力，所以需要额外安装<a href="https://www.npmjs.com/package/canvas" target="_blank" rel="noopener">canvas</a>库来满足需要，用法和在浏览器上是一样的，<a href="https://github.com/zwlafk/canvas/tree/master/photo-mosaik" target="_blank" rel="noopener">完整代码</a>   </p>
<p>我感觉做好这几点会有更好的效果：    </p>
<ul>
<li>判断颜色相近的策略(子图rgb平均值代表它作为像素的颜色是否科学；计算颜色差异程度时使用hsv模型替代rgb模型)</li>
<li>子图片颜色最好均匀</li>
<li>结果与原图的压缩程度尽可能小</li>
<li>我的方案还很不成熟，子图全部截成了正方形以方便与原图像素一一对应，会不会有算法可以使用一张子图对应上多个原图像素点</li>
</ul>
<h3 id="「绿幕」"><a href="#「绿幕」" class="headerlink" title="「绿幕」"></a>「绿幕」</h3><p>这里是<a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Manipulating_video_using_canvas" target="_blank" rel="noopener">MDN上介绍的应用</a>，主要是利用了drawImage可以用video作为图像源这一特点，对视频的每一帧做处理，把每帧的ImageData中特定色值(绿色)的像素透明度替换为0(完全透明)，再画到另一个canvas上，就实现了以特定图像替换「绿幕」的效果，利用这个思路我把两个视频合成起来:    </p>
<p><img src="https://raw.githubusercontent.com/zwlafk/canvas/master/assets/16f8a303b8f62948.gif" alt><br><a href="https://zwlafk.github.io/snippets/canvas/green-screen/demo.html">demo</a><br><a href="https://github.com/zwlafk/canvas/blob/master/green-screen/demo.html" target="_blank" rel="noopener">完整代码</a>    </p>
<p><em>联想一下一些播放器的导入字幕功能，可能也是这个原理把字幕绘制到正在播放的视频上的</em></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最初拿到需求一顿百度谷歌，想找一个第三方插件来实现，现在回过头看实现起来是很简单的。自我反省一下长久以来的调包侠行为让自己变得不重视思考，以后用包或框架还是需要结合需求认真思考下是不是真的需要它。（如果当时找到了插件那也香啊）    </p>
<p>最后这部分小功能的介绍 意义并不在于前端也能把p图，抠图，视频合成之类的功能搬到浏览器上，我觉得更多在于了解这些功能背后的原理，了解ps和视频剪辑软件是如何工作的，毕竟这些操作在浏览器上会占用很高的CPU和GPU，不过随着网络和硬件设备的不断升级，相信有一天这些功能也能在浏览器上流畅的运行</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Canvas" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Glossary/Canvas</a></li>
<li><a href="https://github.com/flozz/StackBlur/blob/master/src/stackblur.js" target="_blank" rel="noopener">https://github.com/flozz/StackBlur/blob/master/src/stackblur.js</a></li>
<li><a href="https://www.cnblogs.com/puyongsong/p/6027533.html" target="_blank" rel="noopener">https://www.cnblogs.com/puyongsong/p/6027533.html</a></li>
<li><a href="https://juejin.im/post/5bdeb357e51d4536140fc7df" target="_blank" rel="noopener">https://juejin.im/post/5bdeb357e51d4536140fc7df</a></li>
<li><a href="https://github.com/WebKit/webkit/blob/master/Source/WebCore/html/HTMLCanvasElement.cpp" target="_blank" rel="noopener">https://github.com/WebKit/webkit/blob/master/Source/WebCore/html/HTMLCanvasElement.cpp</a></li>
<li><a href="https://stackoverflow.com/questions/7721898/is-putimagedata-faster-than-drawimage" target="_blank" rel="noopener">https://stackoverflow.com/questions/7721898/is-putimagedata-faster-than-drawimage</a></li>
<li><a href="https://blog.csdn.net/qidu1998/article/details/79062663" target="_blank" rel="noopener">https://blog.csdn.net/qidu1998/article/details/79062663</a></li>
</ul>
<hr>
<p><a href="https://github.com/zwlafk/canvas" target="_blank" rel="noopener">github地址</a></p>
]]></content>
  </entry>
  <entry>
    <title>js“30秒代码”学习整理</title>
    <url>/2017/12/25/30-seconds-of-code-learning/</url>
    <content><![CDATA[<p>GitHub上的<a href="https://github.com/Chalarangelo/30-seconds-of-code" target="_blank" rel="noopener">30-seconds-of-code</a>项目收集了大量的简短有用的js代码片段，本文是对该项目的学习笔记。（持续更新）<br><a id="more"></a></p>
<ul>
<li>使用<kbd>Ctrl</kbd> + <kbd>F</kbd> 或 <kbd>command</kbd> + <kbd>F</kbd>搜索代码段。</li>
<li>欢迎投稿, 请阅读<a href="CONTRIBUTING.md">投稿指南</a>。</li>
<li>代码段是在 ES6 中编写的, 请使用<a href="https://babeljs.io/" target="_blank" rel="noopener">Babel transpiler</a>确保向后兼容。</li>
</ul>
<p>原文：<a href="https://github.com/Chalarangelo/30-seconds-of-code" target="_blank" rel="noopener">https://github.com/Chalarangelo/30-seconds-of-code</a></p>
<h2 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h2><h3 id="Adapter"><a href="#Adapter" class="headerlink" title="Adapter"></a>Adapter</h3><ul>
<li><a href="#call"><code>call</code></a></li>
<li><a href="#collectinto"><code>collectInto</code></a></li>
<li><a href="#flip"><code>flip</code></a></li>
<li><a href="#promisify"><code>promisify</code></a></li>
<li><a href="#spreadover"><code>spreadOver</code></a></li>
</ul>
<h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><ul>
<li><a href="#arraygcd"><code>arrayGcd</code></a></li>
<li><a href="#arraylcm"><code>arrayLcm</code></a></li>
<li><a href="#arraymax"><code>arrayMax</code></a></li>
<li><a href="#arraymin"><code>arrayMin</code></a></li>
<li><a href="#chunk"><code>chunk</code></a></li>
<li><a href="#compact"><code>compact</code></a></li>
<li><a href="#countoccurrences"><code>countOccurrences</code></a></li>
<li><a href="#deepflatten"><code>deepFlatten</code></a></li>
<li><a href="#difference"><code>difference</code></a></li>
<li><a href="#differencewith"><code>differenceWith</code></a></li>
<li><a href="#distinctvaluesofarray"><code>distinctValuesOfArray</code></a></li>
<li><a href="#dropelements"><code>dropElements</code></a></li>
<li><a href="#dropright"><code>dropRight</code></a></li>
<li><a href="#everynth"><code>everyNth</code></a></li>
<li><a href="#filternonunique"><code>filterNonUnique</code></a></li>
<li><a href="#flatten"><code>flatten</code></a></li>
<li><a href="#flattendepth"><code>flattenDepth</code></a></li>
<li><a href="#groupby"><code>groupBy</code></a></li>
<li><a href="#head"><code>head</code></a></li>
<li><a href="#initial"><code>initial</code></a></li>
<li><a href="#initialize2darray"><code>initialize2DArray</code></a></li>
<li><a href="#initializearraywithrange"><code>initializeArrayWithRange</code></a></li>
<li><a href="#initializearraywithvalues"><code>initializeArrayWithValues</code></a></li>
<li><a href="#intersection"><code>intersection</code></a></li>
<li><a href="#last"><code>last</code></a></li>
<li><a href="#mapobject"><code>mapObject</code></a></li>
<li><a href="#nthelement"><code>nthElement</code></a></li>
<li><a href="#pick"><code>pick</code></a></li>
<li><a href="#pull"><code>pull</code></a></li>
<li><a href="#pullatindex"><code>pullAtIndex</code></a></li>
<li><a href="#pullatvalue"><code>pullAtValue</code></a></li>
<li><a href="#remove"><code>remove</code></a></li>
<li><a href="#sample"><code>sample</code></a></li>
<li><a href="#shuffle"><code>shuffle</code></a></li>
<li><a href="#similarity"><code>similarity</code></a></li>
<li><a href="#symmetricdifference"><code>symmetricDifference</code></a></li>
<li><a href="#tail"><code>tail</code></a></li>
<li><a href="#take"><code>take</code></a></li>
<li><a href="#takeright"><code>takeRight</code></a></li>
<li><a href="#union"><code>union</code></a></li>
<li><a href="#without"><code>without</code></a></li>
<li><a href="#zip"><code>zip</code></a></li>
<li><a href="#zipobject"><code>zipObject</code></a></li>
</ul>
<h3 id="Browser"><a href="#Browser" class="headerlink" title="Browser"></a>Browser</h3><ul>
<li><a href="#arraytohtmllist"><code>arrayToHtmlList</code></a></li>
<li><a href="#bottomvisible"><code>bottomVisible</code></a></li>
<li><a href="#currenturl"><code>currentURL</code></a></li>
<li><a href="#detectdevicetype"><code>detectDeviceType</code></a></li>
<li><a href="#elementisvisibleinviewport"><code>elementIsVisibleInViewport</code></a></li>
<li><a href="#getscrollposition"><code>getScrollPosition</code></a></li>
<li><a href="#geturlparameters"><code>getURLParameters</code></a></li>
<li><a href="#httpsredirect"><code>httpsRedirect</code></a></li>
<li><a href="#redirect"><code>redirect</code></a></li>
<li><a href="#scrolltotop"><code>scrollToTop</code></a></li>
</ul>
<h3 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h3><ul>
<li><a href="#getdaysdiffbetweendates"><code>getDaysDiffBetweenDates</code></a></li>
<li><a href="#jsontodate"><code>JSONToDate</code></a></li>
<li><a href="#toenglishdate"><code>toEnglishDate</code></a></li>
<li><a href="#tomorrow"><code>tomorrow</code></a></li>
</ul>
<h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h3><ul>
<li><a href="#chainasync"><code>chainAsync</code></a></li>
<li><a href="#compose"><code>compose</code></a></li>
<li><a href="#curry"><code>curry</code></a></li>
<li><a href="#functionname"><code>functionName</code></a></li>
<li><a href="#runpromisesinseries"><code>runPromisesInSeries</code></a></li>
<li><a href="#sleep"><code>sleep</code></a></li>
</ul>
<h3 id="Logic"><a href="#Logic" class="headerlink" title="Logic"></a>Logic</h3><ul>
<li><a href="#negate"><code>negate</code></a></li>
</ul>
<h3 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h3><ul>
<li><a href="#arrayaverage"><code>arrayAverage</code></a></li>
<li><a href="#arraysum"><code>arraySum</code></a></li>
<li><a href="#clampnumber"><code>clampNumber</code></a></li>
<li><a href="#collatz"><code>collatz</code></a></li>
<li><a href="#digitize"><code>digitize</code></a></li>
<li><a href="#distance"><code>distance</code></a></li>
<li><a href="#factorial"><code>factorial</code></a></li>
<li><a href="#fibonacci"><code>fibonacci</code></a></li>
<li><a href="#fibonaccicountuntilnum"><code>fibonacciCountUntilNum</code></a></li>
<li><a href="#fibonacciuntilnum"><code>fibonacciUntilNum</code></a></li>
<li><a href="#gcd"><code>gcd</code></a></li>
<li><a href="#hammingdistance"><code>hammingDistance</code></a></li>
<li><a href="#inrange"><code>inRange</code></a></li>
<li><a href="#isarmstrongnumber"><code>isArmstrongNumber</code></a></li>
<li><a href="#isdivisible"><code>isDivisible</code></a></li>
<li><a href="#iseven"><code>isEven</code></a></li>
<li><a href="#isprime"><code>isPrime</code></a></li>
<li><a href="#lcm"><code>lcm</code></a></li>
<li><a href="#median"><code>median</code></a></li>
<li><a href="#palindrome"><code>palindrome</code></a></li>
<li><a href="#percentile"><code>percentile</code></a></li>
<li><a href="#powerset"><code>powerset</code></a></li>
<li><a href="#primes"><code>primes</code></a></li>
<li><a href="#randomintegerinrange"><code>randomIntegerInRange</code></a></li>
<li><a href="#randomnumberinrange"><code>randomNumberInRange</code></a></li>
<li><a href="#round"><code>round</code></a></li>
<li><a href="#standarddeviation"><code>standardDeviation</code></a></li>
</ul>
<h3 id="Media"><a href="#Media" class="headerlink" title="Media"></a>Media</h3><ul>
<li><a href="#speechsynthesis"><code>speechSynthesis</code></a></li>
</ul>
<h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><ul>
<li><a href="#jsontofile"><code>JSONToFile</code></a></li>
<li><a href="#readfilelines"><code>readFileLines</code></a></li>
</ul>
<h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><ul>
<li><a href="#cleanobj"><code>cleanObj</code></a></li>
<li><a href="#objectfrompairs"><code>objectFromPairs</code></a></li>
<li><a href="#objecttopairs"><code>objectToPairs</code></a></li>
<li><a href="#orderby"><code>orderBy</code></a></li>
<li><a href="#select"><code>select</code></a></li>
<li><a href="#shallowclone"><code>shallowClone</code></a></li>
<li><a href="#truthcheckcollection"><code>truthCheckCollection</code></a></li>
</ul>
<h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><ul>
<li><a href="#anagrams"><code>anagrams</code></a></li>
<li><a href="#capitalize"><code>capitalize</code></a></li>
<li><a href="#capitalizeeveryword"><code>capitalizeEveryWord</code></a></li>
<li><a href="#countvowels"><code>countVowels</code></a></li>
<li><a href="#escaperegexp"><code>escapeRegExp</code></a></li>
<li><a href="#fromcamelcase"><code>fromCamelCase</code></a></li>
<li><a href="#repeatstring"><code>repeatString</code></a></li>
<li><a href="#reversestring"><code>reverseString</code></a></li>
<li><a href="#sortcharactersinstring"><code>sortCharactersInString</code></a></li>
<li><a href="#tocamelcase"><code>toCamelCase</code></a></li>
<li><a href="#tokebabcase"><code>toKebabCase</code></a></li>
<li><a href="#tosnakecase"><code>toSnakeCase</code></a></li>
<li><a href="#truncatestring"><code>truncateString</code></a></li>
<li><a href="#words"><code>words</code></a></li>
</ul>
<h3 id="Utility"><a href="#Utility" class="headerlink" title="Utility"></a>Utility</h3><ul>
<li><a href="#coalesce"><code>coalesce</code></a></li>
<li><a href="#coalescefactory"><code>coalesceFactory</code></a></li>
<li><a href="#extendhex"><code>extendHex</code></a></li>
<li><a href="#gettype"><code>getType</code></a></li>
<li><a href="#hextorgb"><code>hexToRGB</code></a></li>
<li><a href="#isarray"><code>isArray</code></a></li>
<li><a href="#isboolean"><code>isBoolean</code></a></li>
<li><a href="#isfunction"><code>isFunction</code></a></li>
<li><a href="#isnumber"><code>isNumber</code></a></li>
<li><a href="#isstring"><code>isString</code></a></li>
<li><a href="#issymbol"><code>isSymbol</code></a></li>
<li><a href="#rgbtohex"><code>RGBToHex</code></a></li>
<li><a href="#timetaken"><code>timeTaken</code></a></li>
<li><a href="#todecimalmark"><code>toDecimalMark</code></a></li>
<li><a href="#toordinalsuffix"><code>toOrdinalSuffix</code></a></li>
<li><a href="#uuidgenerator"><code>UUIDGenerator</code></a></li>
<li><a href="#validatenumber"><code>validateNumber</code></a></li>
</ul>
<h3 id="Uncategorized"><a href="#Uncategorized" class="headerlink" title="Uncategorized"></a><em>Uncategorized</em></h3><ul>
<li><a href="#pipefunctions"><code>pipeFunctions</code></a></li>
<li><a href="#randomhexcolor"><code>randomHexColor</code></a></li>
</ul>
<h2 id="Adapter-1"><a href="#Adapter-1" class="headerlink" title="Adapter"></a>Adapter</h2><h3 id="call"><a href="#call" class="headerlink" title="call"></a>call</h3><p>Given a key and a set of arguments, call them when given a context. Primarily useful in composition.</p>
<p>Use a closure to call a stored key with stored arguments.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> call = <span class="function">(<span class="params"> key, ...args </span>) =&gt;</span> <span class="function"><span class="params">context</span> =&gt;</span> context[ key ]( ...args );</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Promise.resolve( [ 1, 2, 3 ] ).then( call('map', x =&gt; 2 * x ) ).then( console.log ) //[ 2, 4, 6 ]</span></span><br><span class="line"><span class="comment">const map = call.bind(null, 'map')</span></span><br><span class="line"><span class="comment">Promise.resolve( [ 1, 2, 3 ] ).then( map( x =&gt; 2 * x ) ).then( console.log ) //[ 2, 4, 6 ]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="collectInto"><a href="#collectInto" class="headerlink" title="collectInto"></a>collectInto</h3><p>Changes a function that accepts an array into a variadic function.</p>
<p>Given a function, return a closure that collects all inputs into an array-accepting function.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> collectInto = <span class="function"><span class="params">fn</span> =&gt;</span> <span class="function">(<span class="params"> ...args </span>) =&gt;</span> fn( args );</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">const Pall = collectInto( Promise.all.bind(Promise) )</span></span><br><span class="line"><span class="comment">let p1 = Promise.resolve(1)</span></span><br><span class="line"><span class="comment">let p2 = Promise.resolve(2)</span></span><br><span class="line"><span class="comment">let p3 = new Promise((resolve) =&gt; setTimeout(resolve,2000,3))</span></span><br><span class="line"><span class="comment">Pall(p1, p2, p3).then(console.log)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="flip"><a href="#flip" class="headerlink" title="flip"></a>flip</h3><p>Flip takes a function as an argument, then makes the first argument the last</p>
<p>Return a closure that takes variadic inputs, and splices the last argument to make it the first argument before applying the rest.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> flip = <span class="function"><span class="params">fn</span> =&gt;</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> fn(args.pop(), ...args)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">let a = &#123;name: 'John Smith'&#125;</span></span><br><span class="line"><span class="comment">let b = &#123;&#125;</span></span><br><span class="line"><span class="comment">const mergeFrom = flip(Object.assign)</span></span><br><span class="line"><span class="comment">let mergePerson = mergeFrom.bind(null, a)</span></span><br><span class="line"><span class="comment">mergePerson(b) // == b</span></span><br><span class="line"><span class="comment">b = &#123;&#125;</span></span><br><span class="line"><span class="comment">Object.assign(b, a) // == b</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="promisify"><a href="#promisify" class="headerlink" title="promisify"></a>promisify</h3><p>Converts an asynchronous function to return a promise.</p>
<p>Use currying to return a function returning a <code>Promise</code> that calls the original function.<br>Use the <code>...rest</code> operator to pass in all the parameters.</p>
<p><em>In Node 8+, you can use <a href="https://nodejs.org/api/util.html#util_util_promisify_original" target="_blank" rel="noopener"><code>util.promisify</code></a></em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promisify = <span class="function"><span class="params">func</span> =&gt;</span></span><br><span class="line">  (...args) =&gt;</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span></span><br><span class="line">      func(...args, (err, result) =&gt;</span><br><span class="line">        err ? reject(err) : resolve(result))</span><br><span class="line">    );</span><br><span class="line"><span class="comment">// const delay = promisify((d, cb) =&gt; setTimeout(cb, d))</span></span><br><span class="line"><span class="comment">// delay(2000).then(() =&gt; console.log('Hi!')) -&gt; Promise resolves after 2s</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="spreadOver"><a href="#spreadOver" class="headerlink" title="spreadOver"></a>spreadOver</h3><p>Takes a variadic function and returns a closure that accepts an array of arguments to map to the inputs of the function.</p>
<p>Use closures and the spread operator (<code>...</code>) to map the array of arguments to the inputs of the function.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> spreadOver = <span class="function"><span class="params">fn</span> =&gt;</span> <span class="function"><span class="params">argsArr</span> =&gt;</span> fn(...argsArr);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">const arrayMax = spreadOver(Math.max)</span></span><br><span class="line"><span class="comment">arrayMax([1,2,3]) // -&gt; 3</span></span><br><span class="line"><span class="comment">arrayMax([1,2,4]) // -&gt; 4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h2 id="Array-1"><a href="#Array-1" class="headerlink" title="Array"></a>Array</h2><h3 id="arrayGcd"><a href="#arrayGcd" class="headerlink" title="arrayGcd"></a>arrayGcd</h3><p>计算数组中数字的最大公约数。<br><!-- Calculates the greatest common denominator (gcd) of an array of numbers. --></p>
<p>使用 <code>Array.reduce()</code> 和 <code>gcd</code> 递归计算数组中的最大公约数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arrayGcd = <span class="function"><span class="params">arr</span> =&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> gcd = <span class="function">(<span class="params">x, y</span>) =&gt;</span> !y ? x : gcd(y, x % y);</span><br><span class="line">  <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">a,b</span>) =&gt;</span> gcd(a,b));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// arrayGcd([1,2,3,4,5]) -&gt; 1</span></span><br><span class="line"><span class="comment">// arrayGcd([4,8,12]) -&gt; 4</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">其中</span><br><span class="line">const gcd = (x, y) =&gt; !y ? x : gcd(y, x % y);</span><br><span class="line">定义的是一个使用辗转相除法递归计算两数最大公约数的函数</span><br><span class="line">当y为0时，x就是最大公约数，否则进一步对y和x与y取模运算的结果使用辗转相除法，直到y为0</span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="arrayLcm"><a href="#arrayLcm" class="headerlink" title="arrayLcm"></a>arrayLcm</h3><p>计算数组中数字的最小公倍数。</p>
<p>使用 <code>Array.reduce()</code> 和 <code>lcm</code> 递归计算最小公倍数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arrayLcm = <span class="function"><span class="params">arr</span> =&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> gcd = <span class="function">(<span class="params">x, y</span>) =&gt;</span> !y ? x : gcd(y, x % y);</span><br><span class="line">  <span class="keyword">const</span> lcm = <span class="function">(<span class="params">x, y</span>) =&gt;</span> (x*y)/gcd(x, y); </span><br><span class="line">  <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">a,b</span>) =&gt;</span> lcm(a,b));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// arrayLcm([1,2,3,4,5]) -&gt; 60</span></span><br><span class="line"><span class="comment">// arrayLcm([4,8,12]) -&gt; 24</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">其中</span><br><span class="line">const lcm = (x, y) =&gt; (x*y)/gcd(x, y); </span><br><span class="line">定义的是最小公倍数计算的公式，两数之积处以两数的最大公约数就得到两数的最小公倍数</span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="arrayMax"><a href="#arrayMax" class="headerlink" title="arrayMax"></a>arrayMax</h3><p>返回数组中的最大值</p>
<p>使用 <code>Math.max()</code> 结合扩展运算符 (<code>...</code>) 返回数组中的最大值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arrayMax = <span class="function"><span class="params">arr</span> =&gt;</span> <span class="built_in">Math</span>.max(...arr);</span><br><span class="line"><span class="comment">// arrayMax([10, 1, 5]) -&gt; 10</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="arrayMin"><a href="#arrayMin" class="headerlink" title="arrayMin"></a>arrayMin</h3><p>返回数组中的最小值。</p>
<p>使用 <code>Math.min()</code> 结合扩展运算符 (<code>...</code>) 返回数组中的最小值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arrayMin = <span class="function"><span class="params">arr</span> =&gt;</span> <span class="built_in">Math</span>.min(...arr);</span><br><span class="line"><span class="comment">// arrayMin([10, 1, 5]) -&gt; 1</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="chunk"><a href="#chunk" class="headerlink" title="chunk"></a>chunk</h3><p>Chunks an array into smaller arrays of a specified size.</p>
<p>Use <code>Array.from()</code> to create a new array, that fits the number of chunks that will be produced.<br>Use <code>Array.slice()</code> to map each element of the new array to a chunk the length of <code>size</code>.<br>If the original array can’t be split evenly, the final chunk will contain the remaining elements.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> chunk = <span class="function">(<span class="params">arr, size</span>) =&gt;</span></span><br><span class="line">  <span class="built_in">Array</span>.from(&#123;<span class="attr">length</span>: <span class="built_in">Math</span>.ceil(arr.length / size)&#125;, (v, i) =&gt; arr.slice(i * size, i * size + size));</span><br><span class="line"><span class="comment">// chunk([1,2,3,4,5], 2) -&gt; [[1,2],[3,4],[5]]</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<!-- ### compact

Removes falsey values from an array.

Use `Array.filter()` to filter out falsey values (`false`, `null`, `0`, `""`, `undefined`, and `NaN`).

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> compact = <span class="function"><span class="params">arr</span> =&gt;</span> arr.filter(<span class="built_in">Boolean</span>);</span><br><span class="line"><span class="comment">// compact([0, 1, false, 2, '', 3, 'a', 'e'*23, NaN, 's', 34]) -&gt; [ 1, 2, 3, 'a', 's', 34 ]</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="countOccurrences"><a href="#countOccurrences" class="headerlink" title="countOccurrences"></a>countOccurrences</h3><p>Counts the occurrences of a value in an array.</p>
<p>Use <code>Array.reduce()</code> to increment a counter each time you encounter the specific value inside the array.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> countOccurrences = <span class="function">(<span class="params">arr, value</span>) =&gt;</span> arr.reduce(<span class="function">(<span class="params">a, v</span>) =&gt;</span> v === value ? a + <span class="number">1</span> : a + <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// countOccurrences([1,1,2,1,2,3], 1) -&gt; 3</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="deepFlatten"><a href="#deepFlatten" class="headerlink" title="deepFlatten"></a>deepFlatten</h3><p>Deep flattens an array.</p>
<p>Use recursion.<br>Use <code>Array.concat()</code> with an empty array (<code>[]</code>) and the spread operator (<code>...</code>) to flatten an array.<br>Recursively flatten each element that is an array.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> deepFlatten = <span class="function"><span class="params">arr</span> =&gt;</span> [].concat(...arr.map(<span class="function"><span class="params">v</span> =&gt;</span> <span class="built_in">Array</span>.isArray(v) ? deepFlatten(v) : v));</span><br><span class="line"><span class="comment">// deepFlatten([1,[2],[[3],4],5]) -&gt; [1,2,3,4,5]</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="difference"><a href="#difference" class="headerlink" title="difference"></a>difference</h3><p>Returns the difference between two arrays.</p>
<p>Create a <code>Set</code> from <code>b</code>, then use <code>Array.filter()</code> on <code>a</code> to only keep values not contained in <code>b</code>.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> difference = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123; <span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>(b); <span class="keyword">return</span> a.filter(<span class="function"><span class="params">x</span> =&gt;</span> !s.has(x)); &#125;;</span><br><span class="line"><span class="comment">// difference([1,2,3], [1,2,4]) -&gt; [3]</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="differenceWith"><a href="#differenceWith" class="headerlink" title="differenceWith"></a>differenceWith</h3><p>Filters out all values from an array for which the comparator function does not return <code>true</code>.</p>
<p>Use <code>Array.filter()</code> and <code>Array.find()</code> to find the appropriate values.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> differenceWith = <span class="function">(<span class="params">arr, val, comp</span>) =&gt;</span> arr.filter(<span class="function"><span class="params">a</span> =&gt;</span> !val.find(<span class="function"><span class="params">b</span> =&gt;</span> comp(a, b)))</span><br><span class="line"><span class="comment">// differenceWith([1, 1.2, 1.5, 3], [1.9, 3], (a,b) =&gt; Math.round(a) == Math.round(b)) -&gt; [1, 1.2]</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="distinctValuesOfArray"><a href="#distinctValuesOfArray" class="headerlink" title="distinctValuesOfArray"></a>distinctValuesOfArray</h3><p>Returns all the distinct values of an array.</p>
<p>Use ES6 <code>Set</code> and the <code>...rest</code> operator to discard all duplicated values.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> distinctValuesOfArray = <span class="function"><span class="params">arr</span> =&gt;</span> [...new <span class="built_in">Set</span>(arr)];</span><br><span class="line"><span class="comment">// distinctValuesOfArray([1,2,2,3,4,4,5]) -&gt; [1,2,3,4,5]</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="dropElements"><a href="#dropElements" class="headerlink" title="dropElements"></a>dropElements</h3><p>Removes elements in an array until the passed function returns <code>true</code>. Returns the remaining elements in the array.</p>
<p>Loop through the array, using <code>Array.slice()</code> to drop the first element of the array until the returned value from the function is <code>true</code>.<br>Returns the remaining elements.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> dropElements = <span class="function">(<span class="params">arr, func</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">while</span> (arr.length &gt; <span class="number">0</span> &amp;&amp; !func(arr[<span class="number">0</span>])) arr = arr.slice(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// dropElements([1, 2, 3, 4], n =&gt; n &gt;= 3) -&gt; [3,4]</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="dropRight"><a href="#dropRight" class="headerlink" title="dropRight"></a>dropRight</h3><p>Returns a new array with <code>n</code> elements removed from the right.</p>
<p>Use <code>Array.slice()</code> to slice the remove the specified number of elements from the right.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> dropRight = <span class="function">(<span class="params">arr, n = <span class="number">1</span></span>) =&gt;</span> arr.slice(<span class="number">0</span>, -n);</span><br><span class="line"><span class="comment">//dropRight([1,2,3]) -&gt; [1,2]</span></span><br><span class="line"><span class="comment">//dropRight([1,2,3], 2) -&gt; [1]</span></span><br><span class="line"><span class="comment">//dropRight([1,2,3], 42) -&gt; []</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="everyNth"><a href="#everyNth" class="headerlink" title="everyNth"></a>everyNth</h3><p>Returns every nth element in an array.</p>
<p>Use <code>Array.filter()</code> to create a new array that contains every nth element of a given array.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> everyNth = <span class="function">(<span class="params">arr, nth</span>) =&gt;</span> arr.filter(<span class="function">(<span class="params">e, i</span>) =&gt;</span> i % nth === nth - <span class="number">1</span>);</span><br><span class="line"><span class="comment">// everyNth([1,2,3,4,5,6], 2) -&gt; [ 2, 4, 6 ]</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="filterNonUnique"><a href="#filterNonUnique" class="headerlink" title="filterNonUnique"></a>filterNonUnique</h3><p>Filters out the non-unique values in an array.</p>
<p>Use <code>Array.filter()</code> for an array containing only the unique values.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> filterNonUnique = <span class="function"><span class="params">arr</span> =&gt;</span> arr.filter(<span class="function"><span class="params">i</span> =&gt;</span> arr.indexOf(i) === arr.lastIndexOf(i));</span><br><span class="line"><span class="comment">// filterNonUnique([1,2,2,3,4,4,5]) -&gt; [1,3,5]</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="flatten"><a href="#flatten" class="headerlink" title="flatten"></a>flatten</h3><p>Flattens an array.</p>
<p>Use a new array and concatenate it with the spread input array causing a shallow denesting of any contained arrays.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> flatten = <span class="function"><span class="params">arr</span> =&gt;</span> [ ].concat( ...arr );</span><br><span class="line"><span class="comment">// flatten([1,[2],3,4]) -&gt; [1,2,3,4]</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="flattenDepth"><a href="#flattenDepth" class="headerlink" title="flattenDepth"></a>flattenDepth</h3><p>Flattens an array up to the specified depth.</p>
<p>Use recursion, decrementing <code>depth</code> by 1 for each level of depth.<br>Use <code>Array.reduce()</code> and <code>Array.concat()</code> to merge elements or arrays.<br>Base case, for <code>depth</code> equal to <code>1</code> stops recursion.<br>Omit the second element, <code>depth</code> to flatten only to a depth of <code>1</code> (single flatten).</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> flattenDepth = <span class="function">(<span class="params">arr, depth = <span class="number">1</span></span>) =&gt;</span></span><br><span class="line">  depth != <span class="number">1</span> ? arr.reduce(<span class="function">(<span class="params">a, v</span>) =&gt;</span> a.concat(<span class="built_in">Array</span>.isArray(v) ? flattenDepth(v, depth - <span class="number">1</span>) : v), [])</span><br><span class="line">  : arr.reduce(<span class="function">(<span class="params">a, v</span>) =&gt;</span> a.concat(v), []);</span><br><span class="line"><span class="comment">// flattenDepth([1,[2],[[[3],4],5]], 2) -&gt; [1,2,[3],4,5]</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="groupBy"><a href="#groupBy" class="headerlink" title="groupBy"></a>groupBy</h3><p>Groups the elements of an array based on the given function.</p>
<p>Use <code>Array.map()</code> to map the values of an array to a function or property name.<br>Use <code>Array.reduce()</code> to create an object, where the keys are produced from the mapped results.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> groupBy = <span class="function">(<span class="params">arr, func</span>) =&gt;</span></span><br><span class="line">  arr.map(<span class="keyword">typeof</span> func === <span class="string">'function'</span> ? func : <span class="function"><span class="params">val</span> =&gt;</span> val[func])</span><br><span class="line">    .reduce(<span class="function">(<span class="params">acc, val, i</span>) =&gt;</span> &#123; acc[val] = (acc[val] || []).concat(arr[i]); <span class="keyword">return</span> acc; &#125;, &#123;&#125;);</span><br><span class="line"><span class="comment">// groupBy([6.1, 4.2, 6.3], Math.floor) -&gt; &#123;4: [4.2], 6: [6.1, 6.3]&#125;</span></span><br><span class="line"><span class="comment">// groupBy(['one', 'two', 'three'], 'length') -&gt; &#123;3: ['one', 'two'], 5: ['three']&#125;</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="head"><a href="#head" class="headerlink" title="head"></a>head</h3><p>Returns the head of a list.</p>
<p>Use <code>arr[0]</code> to return the first element of the passed array.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> head = <span class="function"><span class="params">arr</span> =&gt;</span> arr[<span class="number">0</span>];</span><br><span class="line"><span class="comment">// head([1,2,3]) -&gt; 1</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="initial"><a href="#initial" class="headerlink" title="initial"></a>initial</h3><p>Returns all the elements of an array except the last one.</p>
<p>Use <code>arr.slice(0,-1)</code> to return all but the last element of the array.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> initial = <span class="function"><span class="params">arr</span> =&gt;</span> arr.slice(<span class="number">0</span>, <span class="number">-1</span>);</span><br><span class="line"><span class="comment">// initial([1,2,3]) -&gt; [1,2]</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="initialize2DArray"><a href="#initialize2DArray" class="headerlink" title="initialize2DArray"></a>initialize2DArray</h3><p>Initializes a 2D array of given width and height and value.</p>
<p>Use <code>Array.map()</code> to generate h rows where each is a new array of size w initialize with value. If the value is not provided, default to <code>null</code>.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> initialize2DArray = <span class="function">(<span class="params">w, h, val = <span class="literal">null</span></span>) =&gt;</span> <span class="built_in">Array</span>(h).fill().map(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Array</span>(w).fill(val));</span><br><span class="line"><span class="comment">// initializeArrayWithRange(2, 2, 0) -&gt; [[0,0], [0,0]]</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="initializeArrayWithRange"><a href="#initializeArrayWithRange" class="headerlink" title="initializeArrayWithRange"></a>initializeArrayWithRange</h3><p>Initializes an array containing the numbers in the specified range where <code>start</code> and <code>end</code> are inclusive.</p>
<p>Use <code>Array((end + 1) - start)</code> to create an array of the desired length, <code>Array.map()</code> to fill with the desired values in a range.<br>You can omit <code>start</code> to use a default value of <code>0</code>.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> initializeArrayWithRange = <span class="function">(<span class="params">end, start = <span class="number">0</span></span>) =&gt;</span> </span><br><span class="line">  <span class="built_in">Array</span>.from(&#123; <span class="attr">length</span>: <span class="function">(<span class="params">end + <span class="number">1</span></span>) - <span class="params">start</span> &#125;).<span class="params">map</span>(<span class="params">(v, i</span>) =&gt;</span> i + start);</span><br><span class="line"><span class="comment">// initializeArrayWithRange(5) -&gt; [0,1,2,3,4,5]</span></span><br><span class="line"><span class="comment">// initializeArrayWithRange(7, 3) -&gt; [3,4,5,6,7]</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="initializeArrayWithValues"><a href="#initializeArrayWithValues" class="headerlink" title="initializeArrayWithValues"></a>initializeArrayWithValues</h3><p>Initializes and fills an array with the specified values.</p>
<p>Use <code>Array(n)</code> to create an array of the desired length, <code>fill(v)</code> to fill it with the desired values.<br>You can omit <code>value</code> to use a default value of <code>0</code>.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> initializeArrayWithValues = <span class="function">(<span class="params">n, value = <span class="number">0</span></span>) =&gt;</span> <span class="built_in">Array</span>(n).fill(value);</span><br><span class="line"><span class="comment">// initializeArrayWithValues(5, 2) -&gt; [2,2,2,2,2]</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="intersection"><a href="#intersection" class="headerlink" title="intersection"></a>intersection</h3><p>Returns a list of elements that exist in both arrays.</p>
<p>Create a <code>Set</code> from <code>b</code>, then use <code>Array.filter()</code> on <code>a</code> to only keep values contained in <code>b</code>.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> intersection = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123; <span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>(b); <span class="keyword">return</span> a.filter(<span class="function"><span class="params">x</span> =&gt;</span> s.has(x)); &#125;;</span><br><span class="line"><span class="comment">// intersection([1,2,3], [4,3,2]) -&gt; [2,3]</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="last"><a href="#last" class="headerlink" title="last"></a>last</h3><p>Returns the last element in an array.</p>
<p>Use <code>arr.length - 1</code> to compute the index of the last element of the given array and returning it.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> last = <span class="function"><span class="params">arr</span> =&gt;</span> arr[arr.length - <span class="number">1</span>];</span><br><span class="line"><span class="comment">// last([1,2,3]) -&gt; 3</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="mapObject"><a href="#mapObject" class="headerlink" title="mapObject"></a>mapObject</h3><p>Maps the values of an array to an object using a function, where the key-value pairs consist of the original value as the key and the mapped value.</p>
<p>Use an anonymous inner function scope to declare an undefined memory space, using closures to store a return value. Use a new <code>Array</code> to store the array with a map of the function over its data set and a comma operator to return a second step, without needing to move from one context to another (due to closures and order of operations).</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mapObject = <span class="function">(<span class="params">arr, fn</span>) =&gt;</span> </span><br><span class="line">  (<span class="function"><span class="params">a</span> =&gt;</span> <span class="function">(<span class="params">a = [arr, arr.map(fn</span>)], <span class="params">a</span>[0].<span class="params">reduce</span>(<span class="params"> (acc,val,ind</span>) =&gt;</span> (acc[val] = a[<span class="number">1</span>][ind], acc), &#123;&#125;) )) ( );</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">const squareIt = arr =&gt; mapObject(arr, a =&gt; a*a)</span></span><br><span class="line"><span class="comment">squareIt([1,2,3]) // &#123; 1: 1, 2: 4, 3: 9 &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="nthElement"><a href="#nthElement" class="headerlink" title="nthElement"></a>nthElement</h3><p>Returns the nth element of an array.</p>
<p>Use <code>Array.slice()</code> to get an array containing the nth element at the first place.<br>If the index is out of bounds, return <code>[]</code>.<br>Omit the second argument, <code>n</code>, to get the first element of the array.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> nthElement = <span class="function">(<span class="params">arr, n=<span class="number">0</span></span>) =&gt;</span> (n&gt;<span class="number">0</span>? arr.slice(n,n+<span class="number">1</span>) : arr.slice(n))[<span class="number">0</span>];</span><br><span class="line"><span class="comment">// nthElement(['a','b','c'],1) -&gt; 'b'</span></span><br><span class="line"><span class="comment">// nthElement(['a','b','b'],-3) -&gt; 'a'</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="pick"><a href="#pick" class="headerlink" title="pick"></a>pick</h3><p>Picks the key-value pairs corresponding to the given keys from an object.</p>
<p>Use <code>Array.reduce()</code> to convert the filtered/picked keys back to an object with the corresponding key-value pair if the key exists in the obj.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> pick = <span class="function">(<span class="params">obj, arr</span>) =&gt;</span></span><br><span class="line">  arr.reduce(<span class="function">(<span class="params">acc, curr</span>) =&gt;</span> (curr <span class="keyword">in</span> obj &amp;&amp; (acc[curr] = obj[curr]), acc), &#123;&#125;);</span><br><span class="line"><span class="comment">// pick(&#123; 'a': 1, 'b': '2', 'c': 3 &#125;, ['a', 'c']) -&gt; &#123; 'a': 1, 'c': 3 &#125;</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="pull"><a href="#pull" class="headerlink" title="pull"></a>pull</h3><p>Mutates the original array to filter out the values specified.</p>
<p>Use <code>Array.filter()</code> and <code>Array.includes()</code> to pull out the values that are not needed.<br>Use <code>Array.length = 0</code> to mutate the passed in an array by resetting it’s length to zero and <code>Array.push()</code> to re-populate it with only the pulled values.</p>
<p><em>(For a snippet that does not mutate the original array see <a href="#without"><code>without</code></a>)</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> pull = <span class="function">(<span class="params">arr, ...args</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> argState = <span class="built_in">Array</span>.isArray(args[<span class="number">0</span>]) ? args[<span class="number">0</span>] : args;</span><br><span class="line">  <span class="keyword">let</span> pulled = arr.filter(<span class="function">(<span class="params">v, i</span>) =&gt;</span> !argState.includes(v));</span><br><span class="line">  arr.length = <span class="number">0</span>; </span><br><span class="line">  pulled.forEach(<span class="function"><span class="params">v</span> =&gt;</span> arr.push(v));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// let myArray1 = ['a', 'b', 'c', 'a', 'b', 'c'];</span></span><br><span class="line"><span class="comment">// pull(myArray1, 'a', 'c');</span></span><br><span class="line"><span class="comment">// console.log(myArray1) -&gt; [ 'b', 'b' ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// let myArray2 = ['a', 'b', 'c', 'a', 'b', 'c'];</span></span><br><span class="line"><span class="comment">// pull(myArray2, ['a', 'c']);</span></span><br><span class="line"><span class="comment">// console.log(myArray2) -&gt; [ 'b', 'b' ]</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="pullAtIndex"><a href="#pullAtIndex" class="headerlink" title="pullAtIndex"></a>pullAtIndex</h3><p>Mutates the original array to filter out the values at the specified indexes.</p>
<p>Use <code>Array.filter()</code> and <code>Array.includes()</code> to pull out the values that are not needed.<br>Use <code>Array.length = 0</code> to mutate the passed in an array by resetting it’s length to zero and <code>Array.push()</code> to re-populate it with only the pulled values.<br>Use <code>Array.push()</code> to keep track of pulled values </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> pullAtIndex = <span class="function">(<span class="params">arr, pullArr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> removed = [];</span><br><span class="line">  <span class="keyword">let</span> pulled = arr.map(<span class="function">(<span class="params">v, i</span>) =&gt;</span> pullArr.includes(i) ? removed.push(v) : v)</span><br><span class="line">                  .filter(<span class="function">(<span class="params">v, i</span>) =&gt;</span> !pullArr.includes(i))</span><br><span class="line">  arr.length = <span class="number">0</span>; </span><br><span class="line">  pulled.forEach(<span class="function"><span class="params">v</span> =&gt;</span> arr.push(v));</span><br><span class="line">  <span class="keyword">return</span> removed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// let myArray = ['a', 'b', 'c', 'd'];</span></span><br><span class="line"><span class="comment">// let pulled = pullAtIndex(myArray, [1, 3]);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(myArray); -&gt; [ 'a', 'c' ]</span></span><br><span class="line"><span class="comment">// console.log(pulled); -&gt; [ 'b', 'd' ]</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="pullAtValue"><a href="#pullAtValue" class="headerlink" title="pullAtValue"></a>pullAtValue</h3><p>Mutates the original array to filter out the values specified. Returns the removed elements.</p>
<p>Use <code>Array.filter()</code> and <code>Array.includes()</code> to pull out the values that are not needed.<br>Use <code>Array.length = 0</code> to mutate the passed in an array by resetting it’s length to zero and <code>Array.push()</code> to re-populate it with only the pulled values.<br>Use <code>Array.push()</code> to keep track of pulled values </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> pullAtValue = <span class="function">(<span class="params">arr, pullArr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> removed = [], </span><br><span class="line">    pushToRemove = arr.forEach(<span class="function">(<span class="params">v, i</span>) =&gt;</span> pullArr.includes(v) ? removed.push(v) : v),</span><br><span class="line">    mutateTo = arr.filter(<span class="function">(<span class="params">v, i</span>) =&gt;</span> !pullArr.includes(v));</span><br><span class="line">  arr.length = <span class="number">0</span>;</span><br><span class="line">  mutateTo.forEach(<span class="function"><span class="params">v</span> =&gt;</span> arr.push(v));</span><br><span class="line">  <span class="keyword">return</span> removed;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">let myArray = ['a', 'b', 'c', 'd'];</span></span><br><span class="line"><span class="comment">let pulled = pullAtValue(myArray, ['b', 'd']);</span></span><br><span class="line"><span class="comment">console.log(myArray); -&gt; [ 'a', 'c' ]</span></span><br><span class="line"><span class="comment">console.log(pulled); -&gt; [ 'b', 'd' ]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h3><p>Removes elements from an array for which the given function returns <code>false</code>.</p>
<p>Use <code>Array.filter()</code> to find array elements that return truthy values and <code>Array.reduce()</code> to remove elements using <code>Array.splice()</code>.<br>The <code>func</code> is invoked with three arguments (<code>value, index, array</code>).</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> remove = <span class="function">(<span class="params">arr, func</span>) =&gt;</span></span><br><span class="line">  <span class="built_in">Array</span>.isArray(arr) ? arr.filter(func).reduce(<span class="function">(<span class="params">acc, val</span>) =&gt;</span> &#123;</span><br><span class="line">    arr.splice(arr.indexOf(val), <span class="number">1</span>); <span class="keyword">return</span> acc.concat(val);</span><br><span class="line">    &#125;, [])</span><br><span class="line">  : [];</span><br><span class="line"><span class="comment">// remove([1, 2, 3, 4], n =&gt; n % 2 == 0) -&gt; [2, 4]</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="sample"><a href="#sample" class="headerlink" title="sample"></a>sample</h3><p>Returns a random element from an array.</p>
<p>Use <code>Math.random()</code> to generate a random number, multiply it by <code>length</code> and round it of to the nearest whole number using <code>Math.floor()</code>.<br>This method also works with strings.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sample = <span class="function"><span class="params">arr</span> =&gt;</span> arr[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * arr.length)];</span><br><span class="line"><span class="comment">// sample([3, 7, 9, 11]) -&gt; 9</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="shuffle"><a href="#shuffle" class="headerlink" title="shuffle"></a>shuffle</h3><p>Randomizes the order of the values of an array, in place.</p>
<p>Uses the Fisher-Yates algoritm to reorder the elements of the array, based on the <a href="https://github.com/lodash/lodash/blob/b2ea6b1cd251796dcb5f9700c4911a7b6223920b/shuffle.js">Lodash implimentation</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> shuffle = <span class="function">(<span class="params">[...arr]</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> m = arr.length;</span><br><span class="line">  <span class="keyword">while</span> (m) &#123;</span><br><span class="line">    <span class="keyword">const</span> i = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * m--);</span><br><span class="line">    [arr[m], arr[i]] = [arr[i], arr[m]];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// shuffle([1,2,3]) -&gt; [2,3,1]</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="similarity"><a href="#similarity" class="headerlink" title="similarity"></a>similarity</h3><p>Returns an array of elements that appear in both arrays.</p>
<p>Use <code>filter()</code> to remove values that are not part of <code>values</code>, determined using <code>includes()</code>.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> similarity = <span class="function">(<span class="params">arr, values</span>) =&gt;</span> arr.filter(<span class="function"><span class="params">v</span> =&gt;</span> values.includes(v));</span><br><span class="line"><span class="comment">// similarity([1,2,3], [1,2,4]) -&gt; [1,2]</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="symmetricDifference"><a href="#symmetricDifference" class="headerlink" title="symmetricDifference"></a>symmetricDifference</h3><p>Returns the symmetric difference between two arrays.</p>
<p>Create a <code>Set</code> from each array, then use <code>Array.filter()</code> on each of them to only keep values not contained in the other.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> symmetricDifference = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> sA = <span class="keyword">new</span> <span class="built_in">Set</span>(a), sB = <span class="keyword">new</span> <span class="built_in">Set</span>(b);</span><br><span class="line">  <span class="keyword">return</span> [...a.filter(<span class="function"><span class="params">x</span> =&gt;</span> !sB.has(x)), ...b.filter(<span class="function"><span class="params">x</span> =&gt;</span> !sA.has(x))];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// symmetricDifference([1,2,3], [1,2,4]) -&gt; [3,4]</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h3><p>Returns all elements in an array except for the first one.</p>
<p>Return <code>arr.slice(1)</code> if the array’s <code>length</code> is more than <code>1</code>, otherwise, return the whole array.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> tail = <span class="function"><span class="params">arr</span> =&gt;</span> arr.length &gt; <span class="number">1</span> ? arr.slice(<span class="number">1</span>) : arr;</span><br><span class="line"><span class="comment">// tail([1,2,3]) -&gt; [2,3]</span></span><br><span class="line"><span class="comment">// tail([1]) -&gt; [1]</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="take"><a href="#take" class="headerlink" title="take"></a>take</h3><p>Returns an array with n elements removed from the beginning.</p>
<p>Use <code>Array.slice()</code> to create a slice of the array with <code>n</code> elements taken from the beginning.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> take = <span class="function">(<span class="params">arr, n = <span class="number">1</span></span>) =&gt;</span> arr.slice(<span class="number">0</span>, n);</span><br><span class="line"><span class="comment">// take([1, 2, 3], 5) -&gt; [1, 2, 3]</span></span><br><span class="line"><span class="comment">// take([1, 2, 3], 0) -&gt; []</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="takeRight"><a href="#takeRight" class="headerlink" title="takeRight"></a>takeRight</h3><p>Returns an array with n elements removed from the end.</p>
<p>Use <code>Array.slice()</code> to create a slice of the array with <code>n</code> elements taken from the end.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> takeRight = <span class="function">(<span class="params">arr, n = <span class="number">1</span></span>) =&gt;</span> arr.slice(arr.length - n, arr.length);</span><br><span class="line"><span class="comment">// takeRight([1, 2, 3], 2) -&gt; [ 2, 3 ]</span></span><br><span class="line"><span class="comment">// takeRight([1, 2, 3]) -&gt; [3]</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="union"><a href="#union" class="headerlink" title="union"></a>union</h3><p>Returns every element that exists in any of the two arrays once.</p>
<p>Create a <code>Set</code> with all values of <code>a</code> and <code>b</code> and convert to an array.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> union = <span class="function">(<span class="params">a, b</span>) =&gt;</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>([...a, ...b]));</span><br><span class="line"><span class="comment">// union([1,2,3], [4,3,2]) -&gt; [1,2,3,4]</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="without"><a href="#without" class="headerlink" title="without"></a>without</h3><p>Filters out the elements of an array, that have one of the specified values.</p>
<p>Use <code>Array.filter()</code> to create an array excluding(using <code>!Array.includes()</code>) all given values.</p>
<p><em>(For a snippet that mutates the original array see <a href="#pull"><code>pull</code></a>)</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> without = <span class="function">(<span class="params">arr, ...args</span>) =&gt;</span> arr.filter(<span class="function"><span class="params">v</span> =&gt;</span> !args.includes(v));</span><br><span class="line"><span class="comment">// without([2, 1, 2, 3], 1, 2) -&gt; [3]</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h3><p>Creates an array of elements, grouped based on the position in the original arrays.</p>
<p>Use <code>Math.max.apply()</code> to get the longest array in the arguments.<br>Creates an array with that length as return value and use <code>Array.from()</code> with a map-function to create an array of grouped elements.<br>If lengths of the argument-arrays vary, <code>undefined</code> is used where no value could be found.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> zip = <span class="function">(<span class="params">...arrays</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> maxLength = <span class="built_in">Math</span>.max(...arrays.map(<span class="function"><span class="params">x</span> =&gt;</span> x.length));</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(&#123;<span class="attr">length</span>: maxLength&#125;).map(<span class="function">(<span class="params">_, i</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">Array</span>.from(&#123;<span class="attr">length</span>: arrays.length&#125;, (_, k) =&gt; arrays[k][i]);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//zip(['a', 'b'], [1, 2], [true, false]); -&gt; [['a', 1, true], ['b', 2, false]]</span></span><br><span class="line"><span class="comment">//zip(['a'], [1, 2], [true, false]); -&gt; [['a', 1, true], [undefined, 2, false]]</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="zipObject"><a href="#zipObject" class="headerlink" title="zipObject"></a>zipObject</h3><p>Given an array of valid property identifiers and an array of values, return an object associating the properties to the values.</p>
<p>Since an object can have undefined values but not undefined property pointers, the array of properties is used to decide the structure of the resulting object using <code>Array.reduce()</code>.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> zipObject = <span class="function">(<span class="params"> props, values </span>) =&gt;</span> props.reduce( <span class="function">(<span class="params"> obj, prop, index </span>) =&gt;</span> ( obj[prop] = values[index], obj ), &#123;&#125; )</span><br><span class="line"><span class="comment">// zipObject(['a','b','c'], [1,2]) -&gt; &#123;a: 1, b: 2, c: undefined&#125;</span></span><br><span class="line"><span class="comment">// zipObject(['a','b'], [1,2,3]) -&gt; &#123;a: 1, b: 2&#125;</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h2 id="Browser-1"><a href="#Browser-1" class="headerlink" title="Browser"></a>Browser</h2><h3 id="arrayToHtmlList"><a href="#arrayToHtmlList" class="headerlink" title="arrayToHtmlList"></a>arrayToHtmlList</h3><p>Converts the given array elements into <code>&lt;li&gt;</code> tags and appends them to the list of the given id.</p>
<p>Use <code>Array.map()</code> and <code>document.querySelector()</code> to create a list of html tags.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arrayToHtmlList = <span class="function">(<span class="params">arr, listID</span>) =&gt;</span> arr.map(<span class="function"><span class="params">item</span> =&gt;</span> <span class="built_in">document</span>.querySelector(<span class="string">"#"</span>+listID).innerHTML+=<span class="string">`&lt;li&gt;<span class="subst">$&#123;item&#125;</span>&lt;/li&gt;`</span>);</span><br><span class="line"><span class="comment">// arrayToHtmlList(['item 1', 'item 2'],'myListID')</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="bottomVisible"><a href="#bottomVisible" class="headerlink" title="bottomVisible"></a>bottomVisible</h3><p>Returns <code>true</code> if the bottom of the page is visible, <code>false</code> otherwise.</p>
<p>Use <code>scrollY</code>, <code>scrollHeight</code> and <code>clientHeight</code> to determine if the bottom of the page is visible.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> bottomVisible = <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">  <span class="built_in">document</span>.documentElement.clientHeight + <span class="built_in">window</span>.scrollY &gt;= (<span class="built_in">document</span>.documentElement.scrollHeight || <span class="built_in">document</span>.documentElement.clientHeight);</span><br><span class="line"><span class="comment">// bottomVisible() -&gt; true</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="currentURL"><a href="#currentURL" class="headerlink" title="currentURL"></a>currentURL</h3><p>Returns the current URL.</p>
<p>Use <code>window.location.href</code> to get current URL.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> currentURL = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">window</span>.location.href;</span><br><span class="line"><span class="comment">// currentUrl() -&gt; 'https://google.com'</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="detectDeviceType"><a href="#detectDeviceType" class="headerlink" title="detectDeviceType"></a>detectDeviceType</h3><p>Detects wether the website is being opened in a mobile device or a desktop/laptop.</p>
<p>Use a regular expression to test the <code>navigator.userAgent</code> property to figure out if the device is a mobile device or a desktop/laptop.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> detectDeviceType = <span class="function"><span class="params">()</span> =&gt;</span> <span class="regexp">/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i</span>.test(navigator.userAgent) ? <span class="string">"Mobile"</span> : <span class="string">"Desktop"</span>;</span><br><span class="line"><span class="comment">// detectDeviceType() -&gt; "Mobile"</span></span><br><span class="line"><span class="comment">// detectDeviceType() -&gt; "Desktop"</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="elementIsVisibleInViewport"><a href="#elementIsVisibleInViewport" class="headerlink" title="elementIsVisibleInViewport"></a>elementIsVisibleInViewport</h3><p>Returns <code>true</code> if the element specified is visible in the viewport, <code>false</code> otherwise.</p>
<p>Use <code>Element.getBoundingClientRect()</code> and the <code>window.inner(Width|Height)</code> values<br>to determine if a given element is visible in the viewport.<br>Omit the second argument to determine if the element is entirely visible, or specify <code>true</code> to determine if<br>it is partially visible.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> elementIsVisibleInViewport = <span class="function">(<span class="params">el, partiallyVisible = <span class="literal">false</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; top, left, bottom, right &#125; = el.getBoundingClientRect();</span><br><span class="line">  <span class="keyword">const</span> &#123; innerHeight, innerWidth &#125; = <span class="built_in">window</span>;</span><br><span class="line">  <span class="keyword">return</span> partiallyVisible</span><br><span class="line">    ? ((top &gt; <span class="number">0</span> &amp;&amp; top &lt; innerHeight) || (bottom &gt; <span class="number">0</span> &amp;&amp; bottom &lt; innerHeight)) &amp;&amp;</span><br><span class="line">      ((left &gt; <span class="number">0</span> &amp;&amp; left &lt; innerWidth) || (right &gt; <span class="number">0</span> &amp;&amp; right &lt; innerWidth))</span><br><span class="line">    : top &gt;= <span class="number">0</span> &amp;&amp; left &gt;= <span class="number">0</span> &amp;&amp; bottom &lt;= innerHeight &amp;&amp; right &lt;= innerWidth;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// e.g. 100x100 viewport and a 10x10px element at position &#123;top: -1, left: 0, bottom: 9, right: 10&#125;</span></span><br><span class="line"><span class="comment">// elementIsVisibleInViewport(el) -&gt; false (not fully visible)</span></span><br><span class="line"><span class="comment">// elementIsVisibleInViewport(el, true) -&gt; true (partially visible)</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="getScrollPosition"><a href="#getScrollPosition" class="headerlink" title="getScrollPosition"></a>getScrollPosition</h3><p>Returns the scroll position of the current page.</p>
<p>Use <code>pageXOffset</code> and <code>pageYOffset</code> if they are defined, otherwise <code>scrollLeft</code> and <code>scrollTop</code>.<br>You can omit <code>el</code> to use a default value of <code>window</code>.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getScrollPosition = <span class="function">(<span class="params">el = <span class="built_in">window</span></span>) =&gt;</span></span><br><span class="line">  (&#123;<span class="attr">x</span>: (el.pageXOffset !== <span class="literal">undefined</span>) ? el.pageXOffset : el.scrollLeft,</span><br><span class="line">    y: (el.pageYOffset !== <span class="literal">undefined</span>) ? el.pageYOffset : el.scrollTop&#125;);</span><br><span class="line"><span class="comment">// getScrollPosition() -&gt; &#123;x: 0, y: 200&#125;</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="getURLParameters"><a href="#getURLParameters" class="headerlink" title="getURLParameters"></a>getURLParameters</h3><p>Returns an object containing the parameters of the current URL.</p>
<p>Use <code>match()</code> with an appropriate regular expression to get all key-value pairs, <code>Array.reduce()</code> to map and combine them into a single object.<br>Pass <code>location.search</code> as the argument to apply to the current <code>url</code>.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getURLParameters = <span class="function"><span class="params">url</span> =&gt;</span></span><br><span class="line">  url.match(<span class="regexp">/([^?=&amp;]+)(=([^&amp;]*))/g</span>).reduce(</span><br><span class="line">    (a, v) =&gt; (a[v.slice(<span class="number">0</span>, v.indexOf(<span class="string">'='</span>))] = v.slice(v.indexOf(<span class="string">'='</span>) + <span class="number">1</span>), a), &#123;&#125;</span><br><span class="line">  );</span><br><span class="line"><span class="comment">// getURLParameters('http://url.com/page?name=Adam&amp;surname=Smith') -&gt; &#123;name: 'Adam', surname: 'Smith'&#125;</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="httpsRedirect"><a href="#httpsRedirect" class="headerlink" title="httpsRedirect"></a>httpsRedirect</h3><p>Redirects the page to HTTPS if its currently in HTTP. Also, pressing the back button doesn’t take it back to the HTTP page as its replaced in the history.</p>
<p>Use <code>location.protocol</code> to get the protocol currently being used. If it’s not HTTPS, use <code>location.replace()</code> to replace the existing page with the HTTPS version of the page. Use <code>location.href</code> to get the full address, split it with <code>String.split()</code> and remove the protocol part of the URL.  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> httpsRedirect = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(location.protocol !== <span class="string">"https:"</span>) location.replace(<span class="string">"https://"</span> + location.href.split(<span class="string">"//"</span>)[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="redirect"><a href="#redirect" class="headerlink" title="redirect"></a>redirect</h3><p>Redirects to a specified URL.</p>
<p>Use <code>window.location.href</code> or <code>window.location.replace()</code> to redirect to <code>url</code>.<br>Pass a second argument to simulate a link click (<code>true</code> - default) or an HTTP redirect (<code>false</code>).</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> redirect = <span class="function">(<span class="params">url, asLink = <span class="literal">true</span></span>) =&gt;</span></span><br><span class="line">  asLink ? <span class="built_in">window</span>.location.href = url : <span class="built_in">window</span>.location.replace(url);</span><br><span class="line"><span class="comment">// redirect('https://google.com')</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="scrollToTop"><a href="#scrollToTop" class="headerlink" title="scrollToTop"></a>scrollToTop</h3><p>Smooth-scrolls to the top of the page.</p>
<p>Get distance from top using <code>document.documentElement.scrollTop</code> or <code>document.body.scrollTop</code>.<br>Scroll by a fraction of the distance from the top. Use <code>window.requestAnimationFrame()</code> to animate the scrolling.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> scrollToTop = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> c = <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop;</span><br><span class="line">  <span class="keyword">if</span> (c &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">window</span>.requestAnimationFrame(scrollToTop);</span><br><span class="line">    <span class="built_in">window</span>.scrollTo(<span class="number">0</span>, c - c / <span class="number">8</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// scrollToTop()</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h2 id="Date-1"><a href="#Date-1" class="headerlink" title="Date"></a>Date</h2><h3 id="getDaysDiffBetweenDates"><a href="#getDaysDiffBetweenDates" class="headerlink" title="getDaysDiffBetweenDates"></a>getDaysDiffBetweenDates</h3><p>Returns the difference (in days) between two dates.</p>
<p>Calculate the difference (in days) between two <code>Date</code> objects.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getDaysDiffBetweenDates = <span class="function">(<span class="params">dateInitial, dateFinal</span>) =&gt;</span> (dateFinal - dateInitial) / (<span class="number">1000</span> * <span class="number">3600</span> * <span class="number">24</span>);</span><br><span class="line"><span class="comment">// getDaysDiffBetweenDates(new Date("2017-12-13"), new Date("2017-12-22")) -&gt; 9</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="JSONToDate"><a href="#JSONToDate" class="headerlink" title="JSONToDate"></a>JSONToDate</h3><p>Converts a JSON object to a date.</p>
<p>Use <code>Date()</code>, to convert dates in JSON format to readable format (<code>dd/mm/yyyy</code>).</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> JSONToDate = <span class="function"><span class="params">arr</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> dt = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">parseInt</span>(arr.toString().substr(<span class="number">6</span>)));</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123; dt.getDate() &#125;</span>/<span class="subst">$&#123; dt.getMonth() + <span class="number">1</span> &#125;</span>/<span class="subst">$&#123; dt.getFullYear() &#125;</span>`</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// JSONToDate(/Date(1489525200000)/) -&gt; "14/3/2017"</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="toEnglishDate"><a href="#toEnglishDate" class="headerlink" title="toEnglishDate"></a>toEnglishDate</h3><p>Converts a date from American format to English format.</p>
<p>Use <code>Date.toISOString()</code>, <code>split(&#39;T&#39;)</code> and <code>replace()</code> to convert a date from American format to the English format.<br>Throws an error if the passed time cannot be converted to a date.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> toEnglishDate  = <span class="function">(<span class="params">time</span>) =&gt;</span></span><br><span class="line">  &#123;<span class="keyword">try</span>&#123;<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(time).toISOString().split(<span class="string">'T'</span>)[<span class="number">0</span>].replace(<span class="regexp">/-/g</span>, <span class="string">'/'</span>)&#125;<span class="keyword">catch</span>(e)&#123;<span class="keyword">return</span>&#125;&#125;;</span><br><span class="line"><span class="comment">// toEnglishDate('09/21/2010') -&gt; '21/09/2010'</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="tomorrow"><a href="#tomorrow" class="headerlink" title="tomorrow"></a>tomorrow</h3><p>Results in a string representation of tomorrow’s date.<br>Use <code>new Date()</code> to get today’s date, adding <code>86400000</code> of seconds to it(24 hours), using <code>toISOString</code> to convert Date object to string.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> tomorrow = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="keyword">new</span> <span class="built_in">Date</span>().getTime() + <span class="number">86400000</span>).toISOString().split(<span class="string">'T'</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="comment">// tomorrow() -&gt; 2017-12-27 (if current date is 2017-12-26)</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h2 id="Function-1"><a href="#Function-1" class="headerlink" title="Function"></a>Function</h2><h3 id="chainAsync"><a href="#chainAsync" class="headerlink" title="chainAsync"></a>chainAsync</h3><p>Chains asynchronous functions.</p>
<p>Loop through an array of functions containing asynchronous events, calling <code>next</code> when each asynchronous event has completed.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> chainAsync = <span class="function"><span class="params">fns</span> =&gt;</span> &#123; <span class="keyword">let</span> curr = <span class="number">0</span>; <span class="keyword">const</span> next = <span class="function"><span class="params">()</span> =&gt;</span> fns[curr++](next); next(); &#125;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">chainAsync([</span></span><br><span class="line"><span class="comment">  next =&gt; &#123; console.log('0 seconds'); setTimeout(next, 1000); &#125;,</span></span><br><span class="line"><span class="comment">  next =&gt; &#123; console.log('1 second');  setTimeout(next, 1000); &#125;,</span></span><br><span class="line"><span class="comment">  next =&gt; &#123; console.log('2 seconds'); &#125;</span></span><br><span class="line"><span class="comment">])</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="compose"><a href="#compose" class="headerlink" title="compose"></a>compose</h3><p>Performs right-to-left function composition.</p>
<p>Use <code>Array.reduce()</code> to perform right-to-left function composition.<br>The last (rightmost) function can accept one or more arguments; the remaining functions must be unary.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> compose = <span class="function">(<span class="params">...fns</span>) =&gt;</span> fns.reduce(<span class="function">(<span class="params">f, g</span>) =&gt;</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> f(g(...args)));</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">const add5 = x =&gt; x + 5</span></span><br><span class="line"><span class="comment">const multiply = (x, y) =&gt; x * y</span></span><br><span class="line"><span class="comment">const multiplyAndAdd5 = compose(add5, multiply)</span></span><br><span class="line"><span class="comment">multiplyAndAdd5(5, 2) -&gt; 15</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="curry"><a href="#curry" class="headerlink" title="curry"></a>curry</h3><p>Curries a function.</p>
<p>Use recursion.<br>If the number of provided arguments (<code>args</code>) is sufficient, call the passed function <code>fn</code>.<br>Otherwise, return a curried function <code>fn</code> that expects the rest of the arguments.<br>If you want to curry a function that accepts a variable number of arguments (a variadic function, e.g. <code>Math.min()</code>), you can optionally pass the number of arguments to the second parameter <code>arity</code>.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> curry = <span class="function">(<span class="params">fn, arity = fn.length, ...args</span>) =&gt;</span></span><br><span class="line">  arity &lt;= args.length</span><br><span class="line">    ? fn(...args)</span><br><span class="line">    : curry.bind(<span class="literal">null</span>, fn, arity, ...args);</span><br><span class="line"><span class="comment">// curry(Math.pow)(2)(10) -&gt; 1024</span></span><br><span class="line"><span class="comment">// curry(Math.min, 3)(10)(50)(2) -&gt; 2</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="functionName"><a href="#functionName" class="headerlink" title="functionName"></a>functionName</h3><p>Logs the name of a function.</p>
<p>Use <code>console.debug()</code> and the <code>name</code> property of the passed method to log the method’s name to the <code>debug</code> channel of the console.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> functionName = <span class="function"><span class="params">fn</span> =&gt;</span> (<span class="built_in">console</span>.debug(fn.name), fn);</span><br><span class="line"><span class="comment">// functionName(Math.max) -&gt; max (logged in debug channel of console)</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="runPromisesInSeries"><a href="#runPromisesInSeries" class="headerlink" title="runPromisesInSeries"></a>runPromisesInSeries</h3><p>Runs an array of promises in series.</p>
<p>Use <code>Array.reduce()</code> to create a promise chain, where each promise returns the next promise when resolved.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> runPromisesInSeries = <span class="function"><span class="params">ps</span> =&gt;</span> ps.reduce(<span class="function">(<span class="params">p, next</span>) =&gt;</span> p.then(next), <span class="built_in">Promise</span>.resolve());</span><br><span class="line"><span class="comment">// const delay = (d) =&gt; new Promise(r =&gt; setTimeout(r, d))</span></span><br><span class="line"><span class="comment">// runPromisesInSeries([() =&gt; delay(1000), () =&gt; delay(2000)]) -&gt; executes each promise sequentially, taking a total of 3 seconds to complete</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h3><p>Delays the execution of an asynchronous function.</p>
<p>Delay executing part of an <code>async</code> function, by putting it to sleep, returning a <code>Promise</code>.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sleep = <span class="function"><span class="params">ms</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> setTimeout(resolve, ms));</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">async function sleepyWork() &#123;</span></span><br><span class="line"><span class="comment">  console.log('I\'m going to sleep for 1 second.');</span></span><br><span class="line"><span class="comment">  await sleep(1000);</span></span><br><span class="line"><span class="comment">  console.log('I woke up after 1 second.');</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h2 id="Logic-1"><a href="#Logic-1" class="headerlink" title="Logic"></a>Logic</h2><h3 id="negate"><a href="#negate" class="headerlink" title="negate"></a>negate</h3><p>Negates a predicate function.</p>
<p>Take a predicate function and apply <code>not</code> to it with its arguments.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> negate = <span class="function"><span class="params">func</span> =&gt;</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> !func(...args);</span><br><span class="line"><span class="comment">// filter([1, 2, 3, 4, 5, 6], negate(isEven)) -&gt; [1, 3, 5]</span></span><br><span class="line"><span class="comment">// negate(isOdd)(1) -&gt; false</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h2 id="Math-1"><a href="#Math-1" class="headerlink" title="Math"></a>Math</h2><h3 id="arrayAverage"><a href="#arrayAverage" class="headerlink" title="arrayAverage"></a>arrayAverage</h3><p>Returns the average of an array of numbers.</p>
<p>Use <code>Array.reduce()</code> to add each value to an accumulator, initialized with a value of <code>0</code>, divide by the <code>length</code> of the array.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arrayAverage = <span class="function"><span class="params">arr</span> =&gt;</span> arr.reduce(<span class="function">(<span class="params">acc, val</span>) =&gt;</span> acc + val, <span class="number">0</span>) / arr.length;</span><br><span class="line"><span class="comment">// arrayAverage([1,2,3]) -&gt; 2</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="arraySum"><a href="#arraySum" class="headerlink" title="arraySum"></a>arraySum</h3><p>Returns the sum of an array of numbers.</p>
<p>Use <code>Array.reduce()</code> to add each value to an accumulator, initialized with a value of <code>0</code>.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arraySum = <span class="function"><span class="params">arr</span> =&gt;</span> arr.reduce(<span class="function">(<span class="params">acc, val</span>) =&gt;</span> acc + val, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// arraySum([1,2,3,4]) -&gt; 10</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="clampNumber"><a href="#clampNumber" class="headerlink" title="clampNumber"></a>clampNumber</h3><p>Clamps <code>num</code> within the inclusive <code>lower</code> and <code>upper</code> bounds.</p>
<p>If <code>lower</code> is greater than <code>upper</code>, swap them.<br>If <code>num</code> falls within the range, return <code>num</code>.<br>Otherwise, return the nearest number in the range.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> clampNumber = <span class="function">(<span class="params">num, lower, upper</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(lower &gt; upper) upper = [lower, lower = upper][<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">return</span> (num&gt;=lower &amp;&amp; num&lt;=upper) ? num : ((num &lt; lower) ? lower : upper) </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// clampNumber(2, 3, 5) -&gt; 3</span></span><br><span class="line"><span class="comment">// clampNumber(1, -1, -5) -&gt; -1</span></span><br><span class="line"><span class="comment">// clampNumber(3, 2, 4) -&gt; 3</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="collatz"><a href="#collatz" class="headerlink" title="collatz"></a>collatz</h3><p>Applies the Collatz algorithm.</p>
<p>If <code>n</code> is even, return <code>n/2</code>. Otherwise, return <code>3n+1</code>.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> collatz = <span class="function"><span class="params">n</span> =&gt;</span> (n % <span class="number">2</span> == <span class="number">0</span>) ? (n / <span class="number">2</span>) : (<span class="number">3</span> * n + <span class="number">1</span>);</span><br><span class="line"><span class="comment">// collatz(8) -&gt; 4</span></span><br><span class="line"><span class="comment">// collatz(5) -&gt; 16</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="digitize"><a href="#digitize" class="headerlink" title="digitize"></a>digitize</h3><p>Converts a number to an array of digits.</p>
<p>Convert the number to a string, using spread operators in ES6(<code>[...string]</code>) build an array.<br>Use <code>Array.map()</code> and <code>parseInt()</code> to transform each value to an integer.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> digitize = <span class="function"><span class="params">n</span> =&gt;</span> [...<span class="string">''</span>+n].map(<span class="function"><span class="params">i</span> =&gt;</span> <span class="built_in">parseInt</span>(i));</span><br><span class="line"><span class="comment">// digitize(2334) -&gt; [2, 3, 3, 4]</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="distance"><a href="#distance" class="headerlink" title="distance"></a>distance</h3><p>Returns the distance between two points.</p>
<p>Use <code>Math.hypot()</code> to calculate the Euclidean distance between two points.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> distance = <span class="function">(<span class="params">x0, y0, x1, y1</span>) =&gt;</span> <span class="built_in">Math</span>.hypot(x1 - x0, y1 - y0);</span><br><span class="line"><span class="comment">// distance(1,1, 2,3) -&gt; 2.23606797749979</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="factorial"><a href="#factorial" class="headerlink" title="factorial"></a>factorial</h3><p>Calculates the factorial of a number.</p>
<p>Use recursion.<br>If <code>n</code> is less than or equal to <code>1</code>, return <code>1</code>.<br>Otherwise, return the product of <code>n</code> and the factorial of <code>n - 1</code>.<br>Throws an exception if <code>n</code> is a negative number.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> factorial = <span class="function"><span class="params">n</span> =&gt;</span></span><br><span class="line">  n &lt; <span class="number">0</span> ? <span class="function">(<span class="params">(</span>) =&gt;</span> &#123; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Negative numbers are not allowed!'</span>) &#125;)()</span><br><span class="line">  : n &lt;= <span class="number">1</span> ? <span class="number">1</span> : n * factorial(n - <span class="number">1</span>);</span><br><span class="line"><span class="comment">// factorial(6) -&gt; 720</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="fibonacci"><a href="#fibonacci" class="headerlink" title="fibonacci"></a>fibonacci</h3><p>Generates an array, containing the Fibonacci sequence, up until the nth term.</p>
<p>Create an empty array of the specific length, initializing the first two values (<code>0</code> and <code>1</code>).<br>Use <code>Array.reduce()</code> to add values into the array, using the sum of the last two values, except for the first two.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fibonacci = <span class="function"><span class="params">n</span> =&gt;</span></span><br><span class="line">  <span class="built_in">Array</span>.from(&#123; <span class="attr">length</span>: n&#125;).reduce(<span class="function">(<span class="params">acc, val, i</span>) =&gt;</span> acc.concat(i &gt; <span class="number">1</span> ? acc[i - <span class="number">1</span>] + acc[i - <span class="number">2</span>] : i), []);</span><br><span class="line"><span class="comment">// fibonacci(5) -&gt; [0,1,1,2,3]</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="fibonacciCountUntilNum"><a href="#fibonacciCountUntilNum" class="headerlink" title="fibonacciCountUntilNum"></a>fibonacciCountUntilNum</h3><p>Returns the number of fibonnacci numbers up to <code>num</code>(<code>0</code> and <code>num</code> inclusive).</p>
<p>Use a mathematical formula to calculate the number of fibonacci numbers until <code>num</code>.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fibonacciCountUntilNum = <span class="function"><span class="params">num</span> =&gt;</span></span><br><span class="line">  <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.log(num * <span class="built_in">Math</span>.sqrt(<span class="number">5</span>) + <span class="number">1</span>/<span class="number">2</span>) / <span class="built_in">Math</span>.log((<span class="built_in">Math</span>.sqrt(<span class="number">5</span>)+<span class="number">1</span>)/<span class="number">2</span>));</span><br><span class="line"><span class="comment">// fibonacciCountUntilNum(10) -&gt; 7</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="fibonacciUntilNum"><a href="#fibonacciUntilNum" class="headerlink" title="fibonacciUntilNum"></a>fibonacciUntilNum</h3><p>Generates an array, containing the Fibonacci sequence, up until the nth term.</p>
<p>Create an empty array of the specific length, initializing the first two values (<code>0</code> and <code>1</code>).<br>Use <code>Array.reduce()</code> to add values into the array, using the sum of the last two values, except for the first two.<br>Uses a mathematical formula to calculate the length of the array required.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fibonacciUntilNum = <span class="function"><span class="params">num</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> n = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.log(num * <span class="built_in">Math</span>.sqrt(<span class="number">5</span>) + <span class="number">1</span>/<span class="number">2</span>) / <span class="built_in">Math</span>.log((<span class="built_in">Math</span>.sqrt(<span class="number">5</span>)+<span class="number">1</span>)/<span class="number">2</span>));</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(&#123; <span class="attr">length</span>: n&#125;).reduce(<span class="function">(<span class="params">acc, val, i</span>) =&gt;</span> acc.concat(i &gt; <span class="number">1</span> ? acc[i - <span class="number">1</span>] + acc[i - <span class="number">2</span>] : i), []);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// fibonacciUntilNum(15) -&gt; [0,1,1,2,3,5,8,13]</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="gcd"><a href="#gcd" class="headerlink" title="gcd"></a>gcd</h3><p>Calculates the greatest common divisor between two numbers.</p>
<p>Use recursion.<br>Base case is when <code>y</code> equals <code>0</code>. In this case, return <code>x</code>.<br>Otherwise, return the GCD of <code>y</code> and the remainder of the division <code>x/y</code>.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> gcd = <span class="function">(<span class="params">x, y</span>) =&gt;</span> !y ? x : gcd(y, x % y);</span><br><span class="line"><span class="comment">// gcd (8, 36) -&gt; 4</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="hammingDistance"><a href="#hammingDistance" class="headerlink" title="hammingDistance"></a>hammingDistance</h3><p>Calculates the Hamming distance between two values.</p>
<p>Use XOR operator (<code>^</code>) to find the bit difference between the two numbers, convert to a binary string using <code>toString(2)</code>.<br>Count and return the number of <code>1</code>s in the string, using <code>match(/1/g)</code>.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> hammingDistance = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span></span><br><span class="line">  ((num1 ^ num2).toString(<span class="number">2</span>).match(<span class="regexp">/1/g</span>) || <span class="string">''</span>).length;</span><br><span class="line"><span class="comment">// hammingDistance(2,3) -&gt; 1</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="inRange"><a href="#inRange" class="headerlink" title="inRange"></a>inRange</h3><p>Checks if the given number falls within the given range. </p>
<p>Use arithmetic comparison to check if the given number is in the specified range.<br>If the second parameter, <code>end</code>, is not specified, the range is considered to be from <code>0</code> to <code>start</code>.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> inRange = <span class="function">(<span class="params">n, start, end=<span class="literal">null</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(end &amp;&amp; start &gt; end) end = [start, start=end][<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">return</span> (end == <span class="literal">null</span>) ? (n&gt;=<span class="number">0</span> &amp;&amp; n&lt;start) : (n&gt;=start &amp;&amp; n&lt;end);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// inRange(3, 2, 5) -&gt; true</span></span><br><span class="line"><span class="comment">// inRange(3, 4) -&gt; true</span></span><br><span class="line"><span class="comment">// inRange(2, 3, 5) -&gt; false</span></span><br><span class="line"><span class="comment">// inrange(3, 2) -&gt; false</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="isArmstrongNumber"><a href="#isArmstrongNumber" class="headerlink" title="isArmstrongNumber"></a>isArmstrongNumber</h3><p>Checks if the given number is an Armstrong number or not.</p>
<p>Convert the given number into an array of digits. Use <code>Math.pow()</code> to get the appropriate power for each digit and sum them up. If the sum is equal to the number itself, return <code>true</code> otherwise <code>false</code>.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isArmstrongNumber = <span class="function"><span class="params">digits</span> =&gt;</span> </span><br><span class="line">  ( <span class="function"><span class="params">arr</span> =&gt;</span> arr.reduce( <span class="function">(<span class="params"> a, d </span>) =&gt;</span> a + <span class="built_in">Math</span>.pow( <span class="built_in">parseInt</span>( d ), arr.length ), <span class="number">0</span> ) == digits ? <span class="literal">true</span> : <span class="literal">false</span> )( ( digits+<span class="string">''</span> ).split( <span class="string">''</span> ) );</span><br><span class="line"><span class="comment">// isArmstrongNumber(1634) -&gt; true</span></span><br><span class="line"><span class="comment">// isArmstrongNumber(371) -&gt; true</span></span><br><span class="line"><span class="comment">// isArmstrongNumber(56) -&gt; false</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="isDivisible"><a href="#isDivisible" class="headerlink" title="isDivisible"></a>isDivisible</h3><p>Checks if the first numeric argument is divisible by the second one.</p>
<p>Use the modulo operator (<code>%</code>) to check if the remainder is equal to <code>0</code>.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isDivisible = <span class="function">(<span class="params">dividend, divisor</span>) =&gt;</span> dividend % divisor === <span class="number">0</span>;</span><br><span class="line"><span class="comment">// isDivisible(6,3) -&gt; true</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="isEven"><a href="#isEven" class="headerlink" title="isEven"></a>isEven</h3><p>Returns <code>true</code> if the given number is even, <code>false</code> otherwise.</p>
<p>Checks whether a number is odd or even using the modulo (<code>%</code>) operator.<br>Returns <code>true</code> if the number is even, <code>false</code> if the number is odd.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isEven = <span class="function"><span class="params">num</span> =&gt;</span> num % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line"><span class="comment">// isEven(3) -&gt; false</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="isPrime"><a href="#isPrime" class="headerlink" title="isPrime"></a>isPrime</h3><p>Checks if the provided integer is a prime number.</p>
<p>Check numbers from <code>2</code> to the square root of the given number.<br>Return <code>false</code> if any of them divides the given number, else return <code>true</code>, unless the number is less than <code>2</code>.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isPrime = <span class="function"><span class="params">num</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> boundary = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.sqrt(num));</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">2</span>; i * i &lt;= boundary; i++) <span class="keyword">if</span> (num % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">return</span> num &gt;= <span class="number">2</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// isPrime(11) -&gt; true</span></span><br><span class="line"><span class="comment">// isPrime(12) -&gt; false</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="lcm"><a href="#lcm" class="headerlink" title="lcm"></a>lcm</h3><p>Returns the least common multiple of two numbers.</p>
<p>Use the greatest common divisor (GCD) formula and <code>Math.abs()</code> to determine the least common multiple.<br>The GCD formula uses recursion.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> lcm = <span class="function">(<span class="params">x,y</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> gcd = <span class="function">(<span class="params">x, y</span>) =&gt;</span> !y ? x : gcd(y, x % y);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.abs(x*y)/(gcd(x,y));</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// lcm(12,7) -&gt; 84</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="median"><a href="#median" class="headerlink" title="median"></a>median</h3><p>Returns the median of an array of numbers.</p>
<p>Find the middle of the array, use <code>Array.sort()</code> to sort the values.<br>Return the number at the midpoint if <code>length</code> is odd, otherwise the average of the two middle numbers.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> median = <span class="function"><span class="params">arr</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> mid = <span class="built_in">Math</span>.floor(arr.length / <span class="number">2</span>), nums = [...arr].sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">  <span class="keyword">return</span> arr.length % <span class="number">2</span> !== <span class="number">0</span> ? nums[mid] : (nums[mid - <span class="number">1</span>] + nums[mid]) / <span class="number">2</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// median([5,6,50,1,-5]) -&gt; 5</span></span><br><span class="line"><span class="comment">// median([0,10,-2,7]) -&gt; 3.5</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="palindrome"><a href="#palindrome" class="headerlink" title="palindrome"></a>palindrome</h3><p>Returns <code>true</code> if the given string is a palindrome, <code>false</code> otherwise.</p>
<p>Convert string <code>toLowerCase()</code> and use <code>replace()</code> to remove non-alphanumeric characters from it.<br>Then, <code>split(&#39;&#39;)</code> into individual characters, <code>reverse()</code>, <code>join(&#39;&#39;)</code> and compare to the original, unreversed string, after converting it <code>tolowerCase()</code>.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> palindrome = <span class="function"><span class="params">str</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> s = str.toLowerCase().replace(<span class="regexp">/[\W_]/g</span>,<span class="string">''</span>);</span><br><span class="line">  <span class="keyword">return</span> s === s.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// palindrome('taco cat') -&gt; true</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="percentile"><a href="#percentile" class="headerlink" title="percentile"></a>percentile</h3><p>Uses the percentile formula to calculate how many numbers in the given array are less or equal to the given value.</p>
<p>Use <code>Array.reduce()</code> to calculate how many numbers are below the value and how many are the same value and apply the percentile formula.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> percentile = <span class="function">(<span class="params">arr, val</span>) =&gt;</span></span><br><span class="line">  <span class="number">100</span> * arr.reduce(<span class="function">(<span class="params">acc,v</span>) =&gt;</span> acc + (v &lt; val ? <span class="number">1</span> : <span class="number">0</span>) + (v === val ? <span class="number">0.5</span> : <span class="number">0</span>), <span class="number">0</span>) / arr.length;</span><br><span class="line"><span class="comment">// percentile([1,2,3,4,5,6,7,8,9,10], 6) -&gt; 55</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="powerset"><a href="#powerset" class="headerlink" title="powerset"></a>powerset</h3><p>Returns the powerset of a given array of numbers.</p>
<p>Use <code>Array.reduce()</code> combined with <code>Array.map()</code> to iterate over elements and combine into an array containing all combinations.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> powerset = <span class="function"><span class="params">arr</span> =&gt;</span></span><br><span class="line">  arr.reduce(<span class="function">(<span class="params">a, v</span>) =&gt;</span> a.concat(a.map(<span class="function"><span class="params">r</span> =&gt;</span> [v].concat(r))), [[]]);</span><br><span class="line"><span class="comment">// powerset([1,2]) -&gt; [[], [1], [2], [2,1]]</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="primes"><a href="#primes" class="headerlink" title="primes"></a>primes</h3><p>Generates primes up to a given number, using the Sieve of Eratosthenes.</p>
<p>Generate an array from <code>2</code> to the given number. Use <code>Array.filter()</code> to filter out the values divisible by any number from <code>2</code> to the square root of the provided number.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> primes = <span class="function"><span class="params">num</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> arr =  <span class="built_in">Array</span>.from(&#123;<span class="attr">length</span>:num<span class="number">-1</span>&#125;).map(<span class="function">(<span class="params">x,i</span>)=&gt;</span> i+<span class="number">2</span>), </span><br><span class="line">    sqroot  = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.sqrt(num)),</span><br><span class="line">    numsTillSqroot  = <span class="built_in">Array</span>.from(&#123;<span class="attr">length</span>:sqroot<span class="number">-1</span>&#125;).map(<span class="function">(<span class="params">x,i</span>)=&gt;</span> i+<span class="number">2</span>);</span><br><span class="line">  numsTillSqroot.forEach(<span class="function"><span class="params">x</span> =&gt;</span> arr = arr.filter(<span class="function"><span class="params">y</span> =&gt;</span> ((y%x)!==<span class="number">0</span>)||(y==x)));</span><br><span class="line">  <span class="keyword">return</span> arr; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// primes(10) -&gt; [2,3,5,7]</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="randomIntegerInRange"><a href="#randomIntegerInRange" class="headerlink" title="randomIntegerInRange"></a>randomIntegerInRange</h3><p>Returns a random integer in the specified range.</p>
<p>Use <code>Math.random()</code> to generate a random number and map it to the desired range, using <code>Math.floor()</code> to make it an integer.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> randomIntegerInRange = <span class="function">(<span class="params">min, max</span>) =&gt;</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>)) + min;</span><br><span class="line"><span class="comment">// randomIntegerInRange(0, 5) -&gt; 2</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="randomNumberInRange"><a href="#randomNumberInRange" class="headerlink" title="randomNumberInRange"></a>randomNumberInRange</h3><p>Returns a random number in the specified range.</p>
<p>Use <code>Math.random()</code> to generate a random value, map it to the desired range using multiplication.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> randomNumberInRange = <span class="function">(<span class="params">min, max</span>) =&gt;</span> <span class="built_in">Math</span>.random() * (max - min) + min;</span><br><span class="line"><span class="comment">// randomNumberInRange(2,10) -&gt; 6.0211363285087005</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="round"><a href="#round" class="headerlink" title="round"></a>round</h3><p>Rounds a number to a specified amount of digits.</p>
<p>Use <code>Math.round()</code> and template literals to round the number to the specified number of digits.<br>Omit the second argument, <code>decimals</code> to round to an integer.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> round = <span class="function">(<span class="params">n, decimals=<span class="number">0</span></span>) =&gt;</span> <span class="built_in">Number</span>(<span class="string">`<span class="subst">$&#123;<span class="built_in">Math</span>.round(<span class="string">`<span class="subst">$&#123;n&#125;</span>e<span class="subst">$&#123;decimals&#125;</span>`</span>)&#125;</span>e-<span class="subst">$&#123;decimals&#125;</span>`</span>);</span><br><span class="line"><span class="comment">// round(1.005, 2) -&gt; 1.01</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="standardDeviation"><a href="#standardDeviation" class="headerlink" title="standardDeviation"></a>standardDeviation</h3><p>Returns the standard deviation of an array of numbers.</p>
<p>Use <code>Array.reduce()</code> to calculate the mean, variance and the sum of the variance of the values, the variance of the values, then<br>determine the standard deviation.<br>You can omit the second argument to get the sample standard deviation or set it to <code>true</code> to get the population standard deviation.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> standardDeviation = <span class="function">(<span class="params">arr, usePopulation = <span class="literal">false</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> mean = arr.reduce(<span class="function">(<span class="params">acc, val</span>) =&gt;</span> acc + val, <span class="number">0</span>) / arr.length;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.sqrt(</span><br><span class="line">    arr.reduce(<span class="function">(<span class="params">acc, val</span>) =&gt;</span> acc.concat(<span class="built_in">Math</span>.pow(val - mean, <span class="number">2</span>)), [])</span><br><span class="line">       .reduce(<span class="function">(<span class="params">acc, val</span>) =&gt;</span> acc + val, <span class="number">0</span>) / (arr.length - (usePopulation ? <span class="number">0</span> : <span class="number">1</span>))</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// standardDeviation([10,2,38,23,38,23,21]) -&gt; 13.284434142114991 (sample)</span></span><br><span class="line"><span class="comment">// standardDeviation([10,2,38,23,38,23,21], true) -&gt; 12.29899614287479 (population)</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h2 id="Media-1"><a href="#Media-1" class="headerlink" title="Media"></a>Media</h2><h3 id="speechSynthesis"><a href="#speechSynthesis" class="headerlink" title="speechSynthesis"></a>speechSynthesis</h3><p>Performs speech synthesis (experimental).</p>
<p>Use <code>SpeechSynthesisUtterance.voice</code> and <code>window.speechSynthesis.getVoices()</code> to convert a message to speech.<br>Use <code>window.speechSynthesis.speak()</code> to play the message.</p>
<p>Learn more about the <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance">SpeechSynthesisUtterance interface of the Web Speech API</a>.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> speechSynthesis = <span class="function"><span class="params">message</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> msg = <span class="keyword">new</span> SpeechSynthesisUtterance(message);</span><br><span class="line">  msg.voice = <span class="built_in">window</span>.speechSynthesis.getVoices()[<span class="number">0</span>];</span><br><span class="line">  <span class="built_in">window</span>.speechSynthesis.speak(msg);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// speechSynthesis('Hello, World') -&gt; plays the message</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h2 id="Node-1"><a href="#Node-1" class="headerlink" title="Node"></a>Node</h2><h3 id="JSONToFile"><a href="#JSONToFile" class="headerlink" title="JSONToFile"></a>JSONToFile</h3><p>Writes a JSON object to a file.</p>
<p>Use <code>fs.writeFile()</code>, template literals and <code>JSON.stringify()</code> to write a <code>json</code> object to a <code>.json</code> file.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> JSONToFile = <span class="function">(<span class="params">obj, filename</span>) =&gt;</span> fs.writeFile(<span class="string">`<span class="subst">$&#123;filename&#125;</span>.json`</span>, <span class="built_in">JSON</span>.stringify(obj, <span class="literal">null</span>, <span class="number">2</span>))</span><br><span class="line"><span class="comment">// JSONToFile(&#123;test: "is passed"&#125;, 'testJsonFile') -&gt; writes the object to 'testJsonFile.json'</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="readFileLines"><a href="#readFileLines" class="headerlink" title="readFileLines"></a>readFileLines</h3><p>Returns an array of lines from the specified file.</p>
<p>Use <code>readFileSync</code> function in <code>fs</code> node package to create a <code>Buffer</code> from a file.<br>convert buffer to string using <code>toString(encoding)</code> function.<br>creating an array from contents of file by <code>split</code>ing file content line by line (each <code>\n</code>).</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> readFileLines = <span class="function"><span class="params">filename</span> =&gt;</span> fs.readFileSync(filename).toString(<span class="string">'UTF8'</span>).split(<span class="string">'\n'</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  contents of test.txt :</span></span><br><span class="line"><span class="comment">    line1</span></span><br><span class="line"><span class="comment">    line2</span></span><br><span class="line"><span class="comment">    line3</span></span><br><span class="line"><span class="comment">    ___________________________</span></span><br><span class="line"><span class="comment">  let arr = readFileLines('test.txt')</span></span><br><span class="line"><span class="comment">  console.log(arr) // -&gt; ['line1', 'line2', 'line3']</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h2 id="Object-1"><a href="#Object-1" class="headerlink" title="Object"></a>Object</h2><h3 id="cleanObj"><a href="#cleanObj" class="headerlink" title="cleanObj"></a>cleanObj</h3><p>Removes any properties except the ones specified from a JSON object.</p>
<p>Use <code>Object.keys()</code> method to loop over given JSON object and deleting keys that are not <code>include</code>d in given array.<br>Also if you give it a special key (<code>childIndicator</code>) it will search deeply inside it to apply function to inner objects too.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cleanObj = <span class="function">(<span class="params">obj, keysToKeep = [], childIndicator</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">Object</span>.keys(obj).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (key === childIndicator) &#123;</span><br><span class="line">      cleanObj(obj[key], keysToKeep, childIndicator);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!keysToKeep.includes(key)) &#123;</span><br><span class="line">      <span class="keyword">delete</span> obj[key];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  const testObj = &#123;a: 1, b: 2, children: &#123;a: 1, b: 2&#125;&#125;</span></span><br><span class="line"><span class="comment">  cleanObj(testObj, ["a"],"children")</span></span><br><span class="line"><span class="comment">  console.log(testObj)// &#123; a: 1, children : &#123; a: 1&#125;&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="objectFromPairs"><a href="#objectFromPairs" class="headerlink" title="objectFromPairs"></a>objectFromPairs</h3><p>Creates an object from the given key-value pairs.</p>
<p>Use <code>Array.reduce()</code> to create and combine key-value pairs.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> objectFromPairs = <span class="function"><span class="params">arr</span> =&gt;</span> arr.reduce(<span class="function">(<span class="params">a, v</span>) =&gt;</span> (a[v[<span class="number">0</span>]] = v[<span class="number">1</span>], a), &#123;&#125;);</span><br><span class="line"><span class="comment">// objectFromPairs([['a',1],['b',2]]) -&gt; &#123;a: 1, b: 2&#125;</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="objectToPairs"><a href="#objectToPairs" class="headerlink" title="objectToPairs"></a>objectToPairs</h3><p>Creates an array of key-value pair arrays from an object.</p>
<p>Use <code>Object.keys()</code> and <code>Array.map()</code> to iterate over the object’s keys and produce an array with key-value pairs.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> objectToPairs = <span class="function"><span class="params">obj</span> =&gt;</span> <span class="built_in">Object</span>.keys(obj).map(<span class="function"><span class="params">k</span> =&gt;</span> [k, obj[k]]);</span><br><span class="line"><span class="comment">// objectToPairs(&#123;a: 1, b: 2&#125;) -&gt; [['a',1],['b',2]])</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="orderBy"><a href="#orderBy" class="headerlink" title="orderBy"></a>orderBy</h3><p>Returns a sorted array of objects ordered by properties and orders.</p>
<p>Uses a custom implementation of sort, that reduces the props array argument with a default value of 0, it uses destructuring to swap the properties position depending on the order passed.<br>If no orders array is passed it sort by ‘asc’ by default.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> orderBy = <span class="function">(<span class="params">arr, props, orders</span>) =&gt;</span></span><br><span class="line">  arr.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span></span><br><span class="line">    props.reduce(<span class="function">(<span class="params">acc, prop, i</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (acc === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> [p1, p2] = orders &amp;&amp; orders[i] === <span class="string">'desc'</span> ? [b[prop], a[prop]] : [a[prop], b[prop]];</span><br><span class="line">        acc = p1 &gt; p2 ? <span class="number">1</span> : p1 &lt; p2 ? <span class="number">-1</span> : <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> acc;</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">  );</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">const users = [&#123; 'name': 'fred',   'age': 48 &#125;,&#123; 'name': 'barney', 'age': 36 &#125;,</span></span><br><span class="line"><span class="comment">  &#123; 'name': 'fred',   'age': 40 &#125;,&#123; 'name': 'barney', 'age': 34 &#125;];</span></span><br><span class="line"><span class="comment">orderby(users, ['name', 'age'], ['asc', 'desc']) -&gt; [&#123;name: 'barney', age: 36&#125;, &#123;name: 'barney', age: 34&#125;, &#123;name: 'fred', age: 48&#125;, &#123;name: 'fred', age: 40&#125;]</span></span><br><span class="line"><span class="comment">orderby(users, ['name', 'age']) -&gt; [&#123;name: 'barney', age: 34&#125;, &#123;name: 'barney', age: 36&#125;, &#123;name: 'fred', age: 40&#125;, &#123;name: 'fred', age: 48&#125;]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><p>Retrieve a property that indicated by the selector from an object.</p>
<p>If the property does not exists returns <code>undefined</code>.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> select = <span class="function">(<span class="params"><span class="keyword">from</span>, selector</span>) =&gt;</span></span><br><span class="line">  selector.split(<span class="string">'.'</span>).reduce(<span class="function">(<span class="params">prev, cur</span>) =&gt;</span> prev &amp;&amp; prev[cur], <span class="keyword">from</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// const obj = &#123;selector: &#123;to: &#123;val: 'val to select'&#125;&#125;&#125;;</span></span><br><span class="line"><span class="comment">// select(obj, 'selector.to.val'); -&gt; 'val to select'</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="shallowClone"><a href="#shallowClone" class="headerlink" title="shallowClone"></a>shallowClone</h3><p>Creates a shallow clone of an object.</p>
<p>Use <code>Object.assign()</code> and an empty object (<code>{}</code>) to create a shallow clone of the original.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> shallowClone = <span class="function"><span class="params">obj</span> =&gt;</span> <span class="built_in">Object</span>.assign(&#123;&#125;, obj);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">const a = &#123; x: true, y: 1 &#125;;</span></span><br><span class="line"><span class="comment">const b = shallowClone(a);</span></span><br><span class="line"><span class="comment">a === b -&gt; false</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="truthCheckCollection"><a href="#truthCheckCollection" class="headerlink" title="truthCheckCollection"></a>truthCheckCollection</h3><p>Checks if the predicate (second argument) is truthy on all elements of a collection (first argument).</p>
<p>Use <code>Array.every()</code> to check if each passed object has the specified property and if it returns a truthy value.</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> truthCheckCollection = <span class="function">(<span class="params">collection, pre</span>) =&gt;</span> (collection.every(<span class="function"><span class="params">obj</span> =&gt;</span> obj[pre]));</span><br><span class="line"><span class="comment">// truthCheckCollection([&#123;"user": "Tinky-Winky", "sex": "male"&#125;, &#123;"user": "Dipsy", "sex": "male"&#125;], "sex") -&gt; true</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h2 id="String-1"><a href="#String-1" class="headerlink" title="String"></a>String</h2><h3 id="anagrams"><a href="#anagrams" class="headerlink" title="anagrams"></a>anagrams</h3><p>Generates all anagrams of a string (contains duplicates).</p>
<p>Use recursion.<br>For each letter in the given string, create all the partial anagrams for the rest of its letters.<br>Use <code>Array.map()</code> to combine the letter with each partial anagram, then <code>Array.reduce()</code> to combine all anagrams in one array.<br>Base cases are for string <code>length</code> equal to <code>2</code> or <code>1</code>.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> anagrams = <span class="function"><span class="params">str</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (str.length &lt;= <span class="number">2</span>) <span class="keyword">return</span> str.length === <span class="number">2</span> ? [str, str[<span class="number">1</span>] + str[<span class="number">0</span>]] : [str];</span><br><span class="line">  <span class="keyword">return</span> str.split(<span class="string">''</span>).reduce(<span class="function">(<span class="params">acc, letter, i</span>) =&gt;</span></span><br><span class="line">    acc.concat(anagrams(str.slice(<span class="number">0</span>, i) + str.slice(i + <span class="number">1</span>)).map(<span class="function"><span class="params">val</span> =&gt;</span> letter + val)), []);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// anagrams('abc') -&gt; ['abc','acb','bac','bca','cab','cba']</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="Capitalize"><a href="#Capitalize" class="headerlink" title="Capitalize"></a>Capitalize</h3><p>Capitalizes the first letter of a string.</p>
<p>Use destructuring and <code>toUpperCase()</code> to capitalize first letter, <code>...rest</code> to get array of characters after first letter and then <code>Array.join(&#39;&#39;)</code> to make it a string again.<br>Omit the <code>lowerRest</code> parameter to keep the rest of the string intact, or set it to <code>true</code> to convert to lowercase.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> capitalize = <span class="function">(<span class="params">[first,...rest], lowerRest = <span class="literal">false</span></span>) =&gt;</span></span><br><span class="line">  first.toUpperCase() + (lowerRest ? rest.join(<span class="string">''</span>).toLowerCase() : rest.join(<span class="string">''</span>));</span><br><span class="line"><span class="comment">// capitalize('myName') -&gt; 'MyName'</span></span><br><span class="line"><span class="comment">// capitalize('myName', true) -&gt; 'Myname'</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="capitalizeEveryWord"><a href="#capitalizeEveryWord" class="headerlink" title="capitalizeEveryWord"></a>capitalizeEveryWord</h3><p>Capitalizes the first letter of every word in a string.</p>
<p>Use <code>replace()</code> to match the first character of each word and <code>toUpperCase()</code> to capitalize it.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> capitalizeEveryWord = <span class="function"><span class="params">str</span> =&gt;</span> str.replace(<span class="regexp">/\b[a-z]/g</span>, char =&gt; char.toUpperCase());</span><br><span class="line"><span class="comment">// capitalizeEveryWord('hello world!') -&gt; 'Hello World!'</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="countVowels"><a href="#countVowels" class="headerlink" title="countVowels"></a>countVowels</h3><p>Retuns <code>number</code> of vowels in provided string.</p>
<p>Use a regular expression to count the number of vowels <code>(A, E, I, O, U)</code> in a <code>string</code>.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> countVowels = <span class="function"><span class="params">str</span> =&gt;</span> (str.match(<span class="regexp">/[aeiou]/ig</span>) || []).length;</span><br><span class="line"><span class="comment">// countVowels('foobar') -&gt; 3</span></span><br><span class="line"><span class="comment">// countVowels('gym') -&gt; 0</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="escapeRegExp"><a href="#escapeRegExp" class="headerlink" title="escapeRegExp"></a>escapeRegExp</h3><p>Escapes a string to use in a regular expression.</p>
<p>Use <code>replace()</code> to escape special characters.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> escapeRegExp = <span class="function"><span class="params">str</span> =&gt;</span> str.replace(<span class="regexp">/[.*+?^$&#123;&#125;()|[\]\\]/g</span>, <span class="string">'\\$&amp;'</span>);</span><br><span class="line"><span class="comment">// escapeRegExp('(test)') -&gt; \\(test\\)</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="fromCamelCase"><a href="#fromCamelCase" class="headerlink" title="fromCamelCase"></a>fromCamelCase</h3><p>Converts a string from camelcase.</p>
<p>Use <code>replace()</code> to remove underscores, hyphens, and spaces and convert words to camelcase.<br>Omit the second argument to use a default separator of <code>_</code>.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fromCamelCase = <span class="function">(<span class="params">str, separator = <span class="string">'_'</span></span>) =&gt;</span></span><br><span class="line">  str.replace(<span class="regexp">/([a-z\d])([A-Z])/g</span>, <span class="string">'$1'</span> + separator + <span class="string">'$2'</span>)</span><br><span class="line">    .replace(<span class="regexp">/([A-Z]+)([A-Z][a-z\d]+)/g</span>, <span class="string">'$1'</span> + separator + <span class="string">'$2'</span>).toLowerCase();</span><br><span class="line"><span class="comment">// fromCamelCase('someDatabaseFieldName', ' ') -&gt; 'some database field name'</span></span><br><span class="line"><span class="comment">// fromCamelCase('someLabelThatNeedsToBeCamelized', '-') -&gt; 'some-label-that-needs-to-be-camelized'</span></span><br><span class="line"><span class="comment">// fromCamelCase('someJavascriptProperty', '_') -&gt; 'some_javascript_property'</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="repeatString"><a href="#repeatString" class="headerlink" title="repeatString"></a>repeatString</h3><p>Repeats a string n times using <code>String.repeat()</code></p>
<p>If no string is provided the default is <code>&quot;&quot;</code> and the default number of times is 2.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> repeatString = <span class="function">(<span class="params">str=<span class="string">""</span>,num=<span class="number">2</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num &gt;= <span class="number">0</span> ? str.repeat(num) : str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// repeatString("abc",3) -&gt; 'abcabcabc'</span></span><br><span class="line"><span class="comment">// repeatString("abc") -&gt; 'abcabc'</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="reverseString"><a href="#reverseString" class="headerlink" title="reverseString"></a>reverseString</h3><p>Reverses a string.</p>
<p>Use <code>split(&#39;&#39;)</code> and <code>Array.reverse()</code> to reverse the order of the characters in the string.<br>Combine characters to get a string using <code>join(&#39;&#39;)</code>.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> reverseString = <span class="function"><span class="params">str</span> =&gt;</span> str.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</span><br><span class="line"><span class="comment">// reverseString('foobar') -&gt; 'raboof'</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="sortCharactersInString"><a href="#sortCharactersInString" class="headerlink" title="sortCharactersInString"></a>sortCharactersInString</h3><p>Alphabetically sorts the characters in a string.</p>
<p>Split the string using <code>split(&#39;&#39;)</code>, <code>Array.sort()</code> utilizing <code>localeCompare()</code>, recombine using <code>join(&#39;&#39;)</code>.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sortCharactersInString = <span class="function"><span class="params">str</span> =&gt;</span></span><br><span class="line">  str.split(<span class="string">''</span>).sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.localeCompare(b)).join(<span class="string">''</span>);</span><br><span class="line"><span class="comment">// sortCharactersInString('cabbage') -&gt; 'aabbceg'</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="toCamelCase"><a href="#toCamelCase" class="headerlink" title="toCamelCase"></a>toCamelCase</h3><p>Converts a string to camelcase.</p>
<p>Break the string into words and combine them capitalizing the first letter of each word.<br>For more detailed explanation of this Regex, <a href="https://regex101.com/r/bMCgAB/1">visit this Site</a>.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> toCamelCase = <span class="function"><span class="params">str</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> s = str &amp;&amp; str.match(<span class="regexp">/[A-Z]&#123;2,&#125;(?=[A-Z][a-z]+[0-9]*|\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g</span>)</span><br><span class="line">    .map(<span class="function"><span class="params">x</span> =&gt;</span> x.slice(<span class="number">0</span>,<span class="number">1</span>).toUpperCase() + x.slice(<span class="number">1</span>).toLowerCase())</span><br><span class="line">    .join(<span class="string">''</span>);</span><br><span class="line">  <span class="keyword">return</span> s.slice(<span class="number">0</span>,<span class="number">1</span>).toLowerCase() + s.slice(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// toCamelCase("some_database_field_name") -&gt; 'someDatabaseFieldName'</span></span><br><span class="line"><span class="comment">// toCamelCase("Some label that needs to be camelized") -&gt; 'someLabelThatNeedsToBeCamelized'</span></span><br><span class="line"><span class="comment">// toCamelCase("some-javascript-property") -&gt; 'someJavascriptProperty'</span></span><br><span class="line"><span class="comment">// toCamelCase("some-mixed_string with spaces_underscores-and-hyphens") -&gt; 'someMixedStringWithSpacesUnderscoresAndHyphens'</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="toKebabCase"><a href="#toKebabCase" class="headerlink" title="toKebabCase"></a>toKebabCase</h3><p>Converts a string to kebab case.</p>
<p>Break the string into words and combine them using <code>-</code> as a separator.<br>For more detailed explanation of this Regex, <a href="https://regex101.com/r/bMCgAB/1">visit this Site</a>.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> toKebabCase = <span class="function"><span class="params">str</span> =&gt;</span></span><br><span class="line">  str &amp;&amp; str.match(<span class="regexp">/[A-Z]&#123;2,&#125;(?=[A-Z][a-z]+[0-9]*|\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g</span>)</span><br><span class="line">    .map(<span class="function"><span class="params">x</span> =&gt;</span> x.toLowerCase())</span><br><span class="line">    .join(<span class="string">'-'</span>);</span><br><span class="line"><span class="comment">// toKebabCase("camelCase") -&gt; 'camel-case'</span></span><br><span class="line"><span class="comment">// toKebabCase("some text") -&gt; 'some-text'</span></span><br><span class="line"><span class="comment">// toKebabCase("some-mixed_string With spaces_underscores-and-hyphens") -&gt; 'some-mixed-string-with-spaces-underscores-and-hyphens'</span></span><br><span class="line"><span class="comment">// toKebabCase("AllThe-small Things") -&gt; "all-the-small-things"</span></span><br><span class="line"><span class="comment">// toKebabCase('IAmListeningToFMWhileLoadingDifferentURLOnMyBrowserAndAlsoEditingSomeXMLAndHTML') -&gt; "i-am-listening-to-fm-while-loading-different-url-on-my-browser-and-also-editing-xml-and-html"</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="toSnakeCase"><a href="#toSnakeCase" class="headerlink" title="toSnakeCase"></a>toSnakeCase</h3><p>Converts a string to snake case.</p>
<p>Break the string into words and combine them using <code>_</code> as a separator.<br>For more detailed explanation of this Regex, <a href="https://regex101.com/r/bMCgAB/1">visit this Site</a>.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> toSnakeCase = <span class="function"><span class="params">str</span> =&gt;</span>&#123;</span><br><span class="line">  str &amp;&amp; str.match(<span class="regexp">/[A-Z]&#123;2,&#125;(?=[A-Z][a-z]+[0-9]*|\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g</span>)</span><br><span class="line">    .map(<span class="function"><span class="params">x</span> =&gt;</span> x.toLowerCase())</span><br><span class="line">    .join(<span class="string">'_'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// toSnakeCase("camelCase") -&gt; 'camel_case'</span></span><br><span class="line"><span class="comment">// toSnakeCase("some text") -&gt; 'some_text'</span></span><br><span class="line"><span class="comment">// toSnakeCase("some-javascript-property") -&gt; 'some_javascript_property'</span></span><br><span class="line"><span class="comment">// toSnakeCase("some-mixed_string With spaces_underscores-and-hyphens") -&gt; 'some_mixed_string_with_spaces_underscores_and_hyphens'</span></span><br><span class="line"><span class="comment">// toSnakeCase("AllThe-small Things") -&gt; "all_the_small_things"</span></span><br><span class="line"><span class="comment">// toSnakeCase('IAmListeningToFMWhileLoadingDifferentURLOnMyBrowserAndAlsoEditingSomeXMLAndHTML') -&gt; "i_am_listening_to_fm_while_loading_different_url_on_my_browser_and_also_editing_some_xml_and_html"</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="truncateString"><a href="#truncateString" class="headerlink" title="truncateString"></a>truncateString</h3><p>Truncates a string up to a specified length.</p>
<p>Determine if the string’s <code>length</code> is greater than <code>num</code>.<br>Return the string truncated to the desired length, with <code>...</code> appended to the end or the original string.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> truncateString = <span class="function">(<span class="params">str, num</span>) =&gt;</span></span><br><span class="line">  str.length &gt; num ? str.slice(<span class="number">0</span>, num &gt; <span class="number">3</span> ? num - <span class="number">3</span> : num) + <span class="string">'...'</span> : str;</span><br><span class="line"><span class="comment">// truncateString('boomerang', 7) -&gt; 'boom...'</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="words"><a href="#words" class="headerlink" title="words"></a>words</h3><p>Converts a given string into an array of words.</p>
<p>Use <code>String.split()</code> with a supplied pattern (defaults to non-alpha as a regex) to convert to an array of strings. Use <code>Array.filter()</code> to remove any empty strings.<br>Omit the second argument to use the default regex.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> words = <span class="function">(<span class="params">str, pattern = <span class="regexp">/[^a-zA-Z-]+/</span></span>) =&gt;</span> str.split(pattern).filter(<span class="built_in">Boolean</span>);</span><br><span class="line"><span class="comment">// words("I love javaScript!!") -&gt; ["I", "love", "javaScript"]</span></span><br><span class="line"><span class="comment">// words("python, javaScript &amp; coffee") -&gt; ["python", "javaScript", "coffee"]</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h2 id="Utility-1"><a href="#Utility-1" class="headerlink" title="Utility"></a>Utility</h2><h3 id="coalesce"><a href="#coalesce" class="headerlink" title="coalesce"></a>coalesce</h3><p>Returns the first non-null/undefined argument.</p>
<p>Use <code>Array.find()</code> to return the first non <code>null</code>/<code>undefined</code> argument.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> coalesce = <span class="function">(<span class="params">...args</span>) =&gt;</span> args.find(<span class="function"><span class="params">_</span> =&gt;</span> ![<span class="literal">undefined</span>, <span class="literal">null</span>].includes(_))</span><br><span class="line"><span class="comment">// coalesce(null,undefined,"",NaN, "Waldo") -&gt; ""</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="coalesceFactory"><a href="#coalesceFactory" class="headerlink" title="coalesceFactory"></a>coalesceFactory</h3><p>Returns a customized coalesce function that returns the first argument that returns <code>true</code> from the provided argument validation function.</p>
<p>Use <code>Array.find()</code> to return the first argument that returns <code>true</code> from the provided argument validation function.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> coalesceFactory = <span class="function"><span class="params">valid</span> =&gt;</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> args.find(valid);</span><br><span class="line"><span class="comment">// const customCoalesce = coalesceFactory(_ =&gt; ![null, undefined, "", NaN].includes(_))</span></span><br><span class="line"><span class="comment">// customCoalesce(undefined, null, NaN, "", "Waldo") //-&gt; "Waldo"</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="extendHex"><a href="#extendHex" class="headerlink" title="extendHex"></a>extendHex</h3><p>Extends a 3-digit color code to a 6-digit color code.</p>
<p>Use <code>Array.map()</code>, <code>split()</code> and <code>Array.join()</code> to join the mapped array for converting a 3-digit RGB notated hexadecimal color-code to the 6-digit form.<br><code>String.slice()</code> is used to remove <code>#</code> from string start since it’s added once.<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> extendHex = <span class="function"><span class="params">shortHex</span> =&gt;</span></span><br><span class="line">  <span class="string">'#'</span> + shortHex.slice(shortHex.startsWith(<span class="string">'#'</span>) ? <span class="number">1</span> : <span class="number">0</span>).split(<span class="string">''</span>).map(<span class="function"><span class="params">x</span> =&gt;</span> x+x).join(<span class="string">''</span>)</span><br><span class="line"><span class="comment">// extendHex('#03f') -&gt; '#0033ff'</span></span><br><span class="line"><span class="comment">// extendHex('05a') -&gt; '#0055aa'</span></span><br></pre></td></tr></table></figure></p>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="getType"><a href="#getType" class="headerlink" title="getType"></a>getType</h3><p>Returns the native type of a value.</p>
<p>Returns lowercased constructor name of value, “undefined” or “null” if value is undefined or null</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getType = <span class="function"><span class="params">v</span> =&gt;</span></span><br><span class="line">  v === <span class="literal">undefined</span> ? <span class="string">'undefined'</span> : v === <span class="literal">null</span> ? <span class="string">'null'</span> : v.constructor.name.toLowerCase();</span><br><span class="line"><span class="comment">// getType(new Set([1,2,3])) -&gt; "set"</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="hexToRGB"><a href="#hexToRGB" class="headerlink" title="hexToRGB"></a>hexToRGB</h3><p>Converts a color code to a <code>rgb()</code> or <code>rgba()</code> string if alpha value is provided.</p>
<p>Use bitwise right-shift operator and mask bits with <code>&amp;</code> (and) operator to convert a hexadecimal color code (with or without prefixed with <code>#</code>) to a string with the RGB values. If it’s 3-digit color code, first convert to 6-digit version. If an alpha value is provided alongside 6-digit hex, give <code>rgba()</code> string in return.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> hexToRGB = <span class="function"><span class="params">hex</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> alpha = <span class="literal">false</span>, h = hex.slice(hex.startsWith(<span class="string">'#'</span>) ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> (h.length === <span class="number">3</span>) h = [...h].map(<span class="function"><span class="params">x</span> =&gt;</span> x + x).join(<span class="string">''</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (h.length === <span class="number">8</span>) alpha = <span class="literal">true</span>;</span><br><span class="line">  h = <span class="built_in">parseInt</span>(h, <span class="number">16</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'rgb'</span> + (alpha ? <span class="string">'a'</span> : <span class="string">''</span>) + <span class="string">'('</span></span><br><span class="line">    + (h &gt;&gt;&gt; (alpha ? <span class="number">24</span> : <span class="number">16</span>)) + <span class="string">', '</span></span><br><span class="line">    + ((h &amp; (alpha ? <span class="number">0x00ff0000</span> : <span class="number">0x00ff00</span>)) &gt;&gt;&gt; (alpha ? <span class="number">16</span> : <span class="number">8</span>)) + <span class="string">', '</span></span><br><span class="line">    + ((h &amp; (alpha ? <span class="number">0x0000ff00</span> : <span class="number">0x0000ff</span>)) &gt;&gt;&gt; (alpha ? <span class="number">8</span> : <span class="number">0</span>))</span><br><span class="line">    + (alpha ? <span class="string">`, <span class="subst">$&#123;(h &amp; <span class="number">0x000000ff</span>)&#125;</span>`</span> : <span class="string">''</span>) + <span class="string">')'</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// hexToRGB('#27ae60ff') -&gt; 'rgba(39, 174, 96, 255)'</span></span><br><span class="line"><span class="comment">// hexToRGB('27ae60') -&gt; 'rgb(39, 174, 96)'</span></span><br><span class="line"><span class="comment">// hexToRGB('#fff') -&gt; 'rgb(255, 255, 255)'</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="isArray"><a href="#isArray" class="headerlink" title="isArray"></a>isArray</h3><p>Checks if the given argument is an array.</p>
<p>Use <code>Array.isArray()</code> to check if a value is classified as an array.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isArray = <span class="function"><span class="params">val</span> =&gt;</span> !!val &amp;&amp; <span class="built_in">Array</span>.isArray(val);</span><br><span class="line"><span class="comment">// isArray(null) -&gt; false</span></span><br><span class="line"><span class="comment">// isArray([1]) -&gt; true</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="isBoolean"><a href="#isBoolean" class="headerlink" title="isBoolean"></a>isBoolean</h3><p>Checks if the given argument is a native boolean element.</p>
<p>Use <code>typeof</code> to check if a value is classified as a boolean primitive.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isBoolean = <span class="function"><span class="params">val</span> =&gt;</span> <span class="keyword">typeof</span> val === <span class="string">'boolean'</span>;</span><br><span class="line"><span class="comment">// isBoolean(null) -&gt; false</span></span><br><span class="line"><span class="comment">// isBoolean(false) -&gt; true</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="isFunction"><a href="#isFunction" class="headerlink" title="isFunction"></a>isFunction</h3><p>Checks if the given argument is a function.</p>
<p>Use <code>typeof</code> to check if a value is classified as a function primitive.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isFunction = <span class="function"><span class="params">val</span> =&gt;</span> val &amp;&amp; <span class="keyword">typeof</span> val === <span class="string">'function'</span>;</span><br><span class="line"><span class="comment">// isFunction('x') -&gt; false</span></span><br><span class="line"><span class="comment">// isFunction(x =&gt; x) -&gt; true</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="isNumber"><a href="#isNumber" class="headerlink" title="isNumber"></a>isNumber</h3><p>Checks if the given argument is a number.</p>
<p>Use <code>typeof</code> to check if a value is classified as a number primitive.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isNumber = <span class="function"><span class="params">val</span> =&gt;</span> <span class="keyword">typeof</span> val === <span class="string">'number'</span>;</span><br><span class="line"><span class="comment">// isNumber('1') -&gt; false</span></span><br><span class="line"><span class="comment">// isNumber(1) -&gt; true</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="isString"><a href="#isString" class="headerlink" title="isString"></a>isString</h3><p>Checks if the given argument is a string.</p>
<p>Use <code>typeof</code> to check if a value is classified as a string primitive.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isString = <span class="function"><span class="params">val</span> =&gt;</span> <span class="keyword">typeof</span> val === <span class="string">'string'</span>;</span><br><span class="line"><span class="comment">// isString(10) -&gt; false</span></span><br><span class="line"><span class="comment">// isString('10') -&gt; true</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="isSymbol"><a href="#isSymbol" class="headerlink" title="isSymbol"></a>isSymbol</h3><p>Checks if the given argument is a symbol.</p>
<p>Use <code>typeof</code> to check if a value is classified as a symbol primitive.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isSymbol = <span class="function"><span class="params">val</span> =&gt;</span> <span class="keyword">typeof</span> val === <span class="string">'symbol'</span>;</span><br><span class="line"><span class="comment">// isSymbol('x') -&gt; false</span></span><br><span class="line"><span class="comment">// isSymbol(Symbol('x')) -&gt; true</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="RGBToHex"><a href="#RGBToHex" class="headerlink" title="RGBToHex"></a>RGBToHex</h3><p>Converts the values of RGB components to a color code.</p>
<p>Convert given RGB parameters to hexadecimal string using bitwise left-shift operator (<code>&lt;&lt;</code>) and <code>toString(16)</code>, then <code>padStart(6,&#39;0&#39;)</code> to get a 6-digit hexadecimal value.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> RGBToHex = <span class="function">(<span class="params">r, g, b</span>) =&gt;</span> ((r &lt;&lt; <span class="number">16</span>) + (g &lt;&lt; <span class="number">8</span>) + b).toString(<span class="number">16</span>).padStart(<span class="number">6</span>, <span class="string">'0'</span>);</span><br><span class="line"><span class="comment">// RGBToHex(255, 165, 1) -&gt; 'ffa501'</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="timeTaken"><a href="#timeTaken" class="headerlink" title="timeTaken"></a>timeTaken</h3><p>Measures the time taken by a function to execute.</p>
<p>Use <code>console.time()</code> and <code>console.timeEnd()</code> to measure the difference between the start and end times to determine how long the callback took to execute.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> timeTaken = <span class="function"><span class="params">callback</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.time(<span class="string">'timeTaken'</span>);  <span class="keyword">const</span> r = callback();</span><br><span class="line">  <span class="built_in">console</span>.timeEnd(<span class="string">'timeTaken'</span>);  <span class="keyword">return</span> r;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// timeTaken(() =&gt; Math.pow(2, 10)) -&gt; 1024</span></span><br><span class="line"><span class="comment">// (logged): timeTaken: 0.02099609375ms</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="toDecimalMark"><a href="#toDecimalMark" class="headerlink" title="toDecimalMark"></a>toDecimalMark</h3><p>Use <code>toLocaleString()</code> to convert a float-point arithmetic to the <a href="https://en.wikipedia.org/wiki/Decimal_mark">Decimal mark</a> form. It makes a comma separated string from a number.</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> toDecimalMark = <span class="function"><span class="params">num</span> =&gt;</span> num.toLocaleString(<span class="string">"en-US"</span>);</span><br><span class="line"><span class="comment">// toDecimalMark(12305030388.9087) -&gt; "12,305,030,388.9087"</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="toOrdinalSuffix"><a href="#toOrdinalSuffix" class="headerlink" title="toOrdinalSuffix"></a>toOrdinalSuffix</h3><p>Adds an ordinal suffix to a number.</p>
<p>Use the modulo operator (<code>%</code>) to find values of single and tens digits.<br>Find which ordinal pattern digits match.<br>If digit is found in teens pattern, use teens ordinal.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> toOrdinalSuffix = <span class="function"><span class="params">num</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> int = <span class="built_in">parseInt</span>(num), digits = [(int % <span class="number">10</span>), (int % <span class="number">100</span>)],</span><br><span class="line">    ordinals = [<span class="string">'st'</span>, <span class="string">'nd'</span>, <span class="string">'rd'</span>, <span class="string">'th'</span>], oPattern = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">    tPattern = [<span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>];</span><br><span class="line">  <span class="keyword">return</span> oPattern.includes(digits[<span class="number">0</span>]) &amp;&amp; !tPattern.includes(digits[<span class="number">1</span>]) ? int + ordinals[digits[<span class="number">0</span>] - <span class="number">1</span>] : int + ordinals[<span class="number">3</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// toOrdinalSuffix("123") -&gt; "123rd"</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="UUIDGenerator"><a href="#UUIDGenerator" class="headerlink" title="UUIDGenerator"></a>UUIDGenerator</h3><p>Generates a UUID.</p>
<p>Use <code>crypto</code> API to generate a UUID, compliant with <a href="https://www.ietf.org/rfc/rfc4122.txt">RFC4122</a> version 4.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> UUIDGenerator = <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">  ([<span class="number">1e7</span>] + <span class="number">-1e3</span> + <span class="number">-4e3</span> + <span class="number">-8e3</span> + <span class="number">-1e11</span>).replace(<span class="regexp">/[018]/g</span>, c =&gt;</span><br><span class="line">    (c ^ crypto.getRandomValues(<span class="keyword">new</span> <span class="built_in">Uint8Array</span>(<span class="number">1</span>))[<span class="number">0</span>] &amp; <span class="number">15</span> &gt;&gt; c / <span class="number">4</span>).toString(<span class="number">16</span>)</span><br><span class="line">  );</span><br><span class="line"><span class="comment">// UUIDGenerator() -&gt; '7982fcfe-5721-4632-bede-6000885be57d'</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="validateNumber"><a href="#validateNumber" class="headerlink" title="validateNumber"></a>validateNumber</h3><p>Returns <code>true</code> if the given value is a number, <code>false</code> otherwise.</p>
<p>Use <code>!isNaN</code> in combination with <code>parseFloat()</code> to check if the argument is a number.<br>Use <code>isFinite()</code> to check if the number is finite.<br>Use <code>Number()</code> to check if the coercion holds.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> validateNumber = <span class="function"><span class="params">n</span> =&gt;</span> !<span class="built_in">isNaN</span>(<span class="built_in">parseFloat</span>(n)) &amp;&amp; <span class="built_in">isFinite</span>(n) &amp;&amp; <span class="built_in">Number</span>(n) == n;</span><br><span class="line"><span class="comment">// validateNumber('10') -&gt; true</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h2 id="Uncategorized-1"><a href="#Uncategorized-1" class="headerlink" title="Uncategorized"></a><em>Uncategorized</em></h2><h3 id="pipeFunctions"><a href="#pipeFunctions" class="headerlink" title="pipeFunctions"></a>pipeFunctions</h3><p>Performs left-to-right function composition.</p>
<p>Use <code>Array.reduce()</code> with the spread operator (<code>...</code>) to perform left-to-right function composition.<br>The first (leftmost) function can accept one or more arguments; the remaining functions must be unary.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> pipeFunctions = <span class="function">(<span class="params">...fns</span>) =&gt;</span> fns.reduce(<span class="function">(<span class="params">f, g</span>) =&gt;</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> g(f(...args)));</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">const add5 = x =&gt; x + 5</span></span><br><span class="line"><span class="comment">const multiply = (x, y) =&gt; x * y</span></span><br><span class="line"><span class="comment">const multiplyAndAdd5 = pipeFunctions(multiply, add5)</span></span><br><span class="line"><span class="comment">multiplyAndAdd5(5, 2) -&gt; 15</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a></p>
<h3 id="randomHexColor"><a href="#randomHexColor" class="headerlink" title="randomHexColor"></a>randomHexColor</h3><p>Generates a random hexadecimal color code.</p>
<p>Use <code>Math.random</code> to generate a random 24-bit(6x4bits) hexadecimal number. Use bit shifting and then convert it to an hexadecimal String using <code>toString(16)</code>. </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> randomHexColor = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> n = (<span class="built_in">Math</span>.random()*<span class="number">0xfffff</span>|<span class="number">0</span>).toString(<span class="number">16</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'#'</span> + (n.length !== <span class="number">6</span></span><br><span class="line">        ? (<span class="built_in">Math</span>.random()*<span class="number">0xf</span>|<span class="number">0</span>).toString(<span class="number">16</span>) + n : n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// randomHexColorCode() -&gt; "#e34155"</span></span><br><span class="line"><span class="comment">// randomHexColorCode() -&gt; "#fd73a6"</span></span><br><span class="line"><span class="comment">// randomHexColorCode() -&gt; "#4144c6"</span></span><br></pre></td></tr></table></figure>
<p><a href="#table-of-contents">⬆ back to top</a> –&gt;</p>
-->]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
</search>
